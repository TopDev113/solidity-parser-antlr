// Generated from Solidity.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('../antlr4/index');
var SolidityListener = require('./SolidityListener').SolidityListener;
var grammarFileName = "Solidity.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003o\u0306\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u0084\n\u0002\f\u0002\u000e",
    "\u0002\u0087\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u0094\n\u0005\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u0098\n\u0006\u0003\u0007\u0003\u0007\u0003\b\u0005\b\u009d\n",
    "\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0005\t\u00a4\n\t\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0005\n\u00aa\n\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0005\n\u00b1\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0007\n\u00bb\n\n\f\n\u000e\n\u00be\u000b\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00c5\n\n\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b",
    "\u00cd\n\u000b\f\u000b\u000e\u000b\u00d0\u000b\u000b\u0005\u000b\u00d2",
    "\n\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u00d6\n\u000b\f\u000b\u000e",
    "\u000b\u00d9\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0007\f\u00e2\n\f\f\f\u000e\f\u00e5\u000b\f\u0003",
    "\f\u0003\f\u0005\f\u00e9\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0005\r\u00f2\n\r\u0003\u000e\u0003\u000e\u0007\u000e",
    "\u00f6\n\u000e\f\u000e\u000e\u000e\u00f9\u000b\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0005\u000e\u00fe\n\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u0107\n\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007",
    "\u0010\u0113\n\u0010\f\u0010\u000e\u0010\u0116\u000b\u0010\u0005\u0010",
    "\u0118\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u011f\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u0126\n\u0012\u0003\u0012\u0005",
    "\u0012\u0129\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u012d\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0132\n\u0013\u0003",
    "\u0013\u0003\u0013\u0005\u0013\u0136\n\u0013\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0007\u0015\u0142\n\u0015\f\u0015\u000e\u0015",
    "\u0145\u000b\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u014b\n\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0155\n",
    "\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u0159\n\u0018\f\u0018\u000e",
    "\u0018\u015c\u000b\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0005\u0019\u0163\n\u0019\u0003\u0019\u0005\u0019\u0166",
    "\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u016b\n\u0019",
    "\u0003\u0019\u0005\u0019\u016e\n\u0019\u0007\u0019\u0170\n\u0019\f\u0019",
    "\u000e\u0019\u0173\u000b\u0019\u0005\u0019\u0175\n\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u017c\n",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0181\n\u001a",
    "\u0007\u001a\u0183\n\u001a\f\u001a\u000e\u001a\u0186\u000b\u001a\u0005",
    "\u001a\u0188\n\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0007\u001b\u0190\n\u001b\f\u001b\u000e\u001b",
    "\u0193\u000b\u001b\u0005\u001b\u0195\n\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u019b\n\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u01a4\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d",
    "\u01a9\n\u001d\u0003\u001d\u0007\u001d\u01ac\n\u001d\f\u001d\u000e\u001d",
    "\u01af\u000b\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01b4",
    "\n\u001e\f\u001e\u000e\u001e\u01b7\u000b\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 ",
    "\u0003 \u0003 \u0007 \u01c3\n \f \u000e \u01c6\u000b \u0003 \u0003 ",
    "\u0005 \u01ca\n \u0003!\u0003!\u0003\"\u0003\"\u0007\"\u01d0\n\"\f\"",
    "\u000e\"\u01d3\u000b\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u01e2\n#\u0003$\u0003",
    "$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u01ee",
    "\n%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0005",
    "\'\u01f8\n\'\u0003(\u0003(\u0003(\u0003(\u0005(\u01fe\n(\u0003(\u0005",
    "(\u0201\n(\u0003(\u0003(\u0005(\u0205\n(\u0003(\u0003(\u0003(\u0003",
    ")\u0003)\u0005)\u020c\n)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003",
    "-\u0003-\u0005-\u0220\n-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003/\u0003",
    "/\u0003/\u0005/\u022a\n/\u0003/\u0003/\u0005/\u022e\n/\u0003/\u0003",
    "/\u00030\u00030\u00050\u0234\n0\u00030\u00070\u0237\n0\f0\u000e0\u023a",
    "\u000b0\u00030\u00050\u023d\n0\u00030\u00030\u00031\u00031\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00052\u0255\n2\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00072\u0293",
    "\n2\f2\u000e2\u0296\u000b2\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00053\u029f\n3\u00034\u00034\u00034\u00074\u02a4\n4\f4\u000e",
    "4\u02a7\u000b4\u00035\u00035\u00035\u00075\u02ac\n5\f5\u000e5\u02af",
    "\u000b5\u00035\u00055\u02b2\n5\u00036\u00036\u00036\u00036\u00037\u0003",
    "7\u00057\u02ba\n7\u00037\u00037\u00057\u02be\n7\u00057\u02c0\n7\u0003",
    "8\u00038\u00078\u02c4\n8\f8\u000e8\u02c7\u000b8\u00038\u00038\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u02d4",
    "\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0005;\u02e0\n;\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0005=\u02e8",
    "\n=\u0003=\u0003=\u0007=\u02ec\n=\f=\u000e=\u02ef\u000b=\u0003=\u0003",
    "=\u0003>\u0003>\u0003>\u0003>\u0007>\u02f7\n>\f>\u000e>\u02fa\u000b",
    ">\u0005>\u02fc\n>\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0005@\u0304",
    "\n@\u0003@\u0002\u00048bA\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0002\u0012\u0003\u0002\u0005\t\u0004\u0002\f\f",
    "kk\u0003\u0002\u0011\u0013\u0003\u0002\u0017\u001a\u0005\u0002\u0018",
    "\u0018\u001a\u001a\"#\u0003\u0002-.\u0004\u00028;_c\u0003\u0002<=\u0003",
    "\u0002?@\u0003\u0002AB\u0004\u0002\f\fFG\u0003\u0002HI\u0003\u0002\u0006",
    "\t\u0003\u0002LM\u0004\u0002\u001b\u001bR[\u0003\u0002fg\u0002\u0352",
    "\u0002\u0085\u0003\u0002\u0002\u0002\u0004\u008a\u0003\u0002\u0002\u0002",
    "\u0006\u008f\u0003\u0002\u0002\u0002\b\u0093\u0003\u0002\u0002\u0002",
    "\n\u0095\u0003\u0002\u0002\u0002\f\u0099\u0003\u0002\u0002\u0002\u000e",
    "\u009c\u0003\u0002\u0002\u0002\u0010\u00a0\u0003\u0002\u0002\u0002\u0012",
    "\u00c4\u0003\u0002\u0002\u0002\u0014\u00c6\u0003\u0002\u0002\u0002\u0016",
    "\u00dc\u0003\u0002\u0002\u0002\u0018\u00f1\u0003\u0002\u0002\u0002\u001a",
    "\u00f3\u0003\u0002\u0002\u0002\u001c\u0101\u0003\u0002\u0002\u0002\u001e",
    "\u010a\u0003\u0002\u0002\u0002 \u011b\u0003\u0002\u0002\u0002\"\u0122",
    "\u0003\u0002\u0002\u0002$\u012a\u0003\u0002\u0002\u0002&\u0137\u0003",
    "\u0002\u0002\u0002(\u0143\u0003\u0002\u0002\u0002*\u0146\u0003\u0002",
    "\u0002\u0002,\u014e\u0003\u0002\u0002\u0002.\u0150\u0003\u0002\u0002",
    "\u00020\u015f\u0003\u0002\u0002\u00022\u0178\u0003\u0002\u0002\u0002",
    "4\u018b\u0003\u0002\u0002\u00026\u0198\u0003\u0002\u0002\u00028\u01a3",
    "\u0003\u0002\u0002\u0002:\u01b0\u0003\u0002\u0002\u0002<\u01b8\u0003",
    "\u0002\u0002\u0002>\u01bf\u0003\u0002\u0002\u0002@\u01cb\u0003\u0002",
    "\u0002\u0002B\u01cd\u0003\u0002\u0002\u0002D\u01e1\u0003\u0002\u0002",
    "\u0002F\u01e3\u0003\u0002\u0002\u0002H\u01e6\u0003\u0002\u0002\u0002",
    "J\u01ef\u0003\u0002\u0002\u0002L\u01f7\u0003\u0002\u0002\u0002N\u01f9",
    "\u0003\u0002\u0002\u0002P\u0209\u0003\u0002\u0002\u0002R\u020f\u0003",
    "\u0002\u0002\u0002T\u0217\u0003\u0002\u0002\u0002V\u021a\u0003\u0002",
    "\u0002\u0002X\u021d\u0003\u0002\u0002\u0002Z\u0223\u0003\u0002\u0002",
    "\u0002\\\u0229\u0003\u0002\u0002\u0002^\u0231\u0003\u0002\u0002\u0002",
    "`\u0240\u0003\u0002\u0002\u0002b\u0254\u0003\u0002\u0002\u0002d\u029e",
    "\u0003\u0002\u0002\u0002f\u02a0\u0003\u0002\u0002\u0002h\u02a8\u0003",
    "\u0002\u0002\u0002j\u02b3\u0003\u0002\u0002\u0002l\u02bf\u0003\u0002",
    "\u0002\u0002n\u02c1\u0003\u0002\u0002\u0002p\u02d3\u0003\u0002\u0002",
    "\u0002r\u02d5\u0003\u0002\u0002\u0002t\u02df\u0003\u0002\u0002\u0002",
    "v\u02e1\u0003\u0002\u0002\u0002x\u02e4\u0003\u0002\u0002\u0002z\u02f2",
    "\u0003\u0002\u0002\u0002|\u02ff\u0003\u0002\u0002\u0002~\u0301\u0003",
    "\u0002\u0002\u0002\u0080\u0084\u0005\u0004\u0003\u0002\u0081\u0084\u0005",
    "\u0012\n\u0002\u0082\u0084\u0005\u0014\u000b\u0002\u0083\u0080\u0003",
    "\u0002\u0002\u0002\u0083\u0081\u0003\u0002\u0002\u0002\u0083\u0082\u0003",
    "\u0002\u0002\u0002\u0084\u0087\u0003\u0002\u0002\u0002\u0085\u0083\u0003",
    "\u0002\u0002\u0002\u0085\u0086\u0003\u0002\u0002\u0002\u0086\u0088\u0003",
    "\u0002\u0002\u0002\u0087\u0085\u0003\u0002\u0002\u0002\u0088\u0089\u0007",
    "\u0002\u0002\u0003\u0089\u0003\u0003\u0002\u0002\u0002\u008a\u008b\u0007",
    "\u0003\u0002\u0002\u008b\u008c\u0005\u0006\u0004\u0002\u008c\u008d\u0005",
    "\b\u0005\u0002\u008d\u008e\u0007\u0004\u0002\u0002\u008e\u0005\u0003",
    "\u0002\u0002\u0002\u008f\u0090\u0007k\u0002\u0002\u0090\u0007\u0003",
    "\u0002\u0002\u0002\u0091\u0094\u0005\n\u0006\u0002\u0092\u0094\u0005",
    "b2\u0002\u0093\u0091\u0003\u0002\u0002\u0002\u0093\u0092\u0003\u0002",
    "\u0002\u0002\u0094\t\u0003\u0002\u0002\u0002\u0095\u0097\u0005\u000e",
    "\b\u0002\u0096\u0098\u0005\u000e\b\u0002\u0097\u0096\u0003\u0002\u0002",
    "\u0002\u0097\u0098\u0003\u0002\u0002\u0002\u0098\u000b\u0003\u0002\u0002",
    "\u0002\u0099\u009a\t\u0002\u0002\u0002\u009a\r\u0003\u0002\u0002\u0002",
    "\u009b\u009d\u0005\f\u0007\u0002\u009c\u009b\u0003\u0002\u0002\u0002",
    "\u009c\u009d\u0003\u0002\u0002\u0002\u009d\u009e\u0003\u0002\u0002\u0002",
    "\u009e\u009f\u0007d\u0002\u0002\u009f\u000f\u0003\u0002\u0002\u0002",
    "\u00a0\u00a3\u0007k\u0002\u0002\u00a1\u00a2\u0007\n\u0002\u0002\u00a2",
    "\u00a4\u0007k\u0002\u0002\u00a3\u00a1\u0003\u0002\u0002\u0002\u00a3",
    "\u00a4\u0003\u0002\u0002\u0002\u00a4\u0011\u0003\u0002\u0002\u0002\u00a5",
    "\u00a6\u0007\u000b\u0002\u0002\u00a6\u00a9\u0007l\u0002\u0002\u00a7",
    "\u00a8\u0007\n\u0002\u0002\u00a8\u00aa\u0007k\u0002\u0002\u00a9\u00a7",
    "\u0003\u0002\u0002\u0002\u00a9\u00aa\u0003\u0002\u0002\u0002\u00aa\u00ab",
    "\u0003\u0002\u0002\u0002\u00ab\u00c5\u0007\u0004\u0002\u0002\u00ac\u00ad",
    "\u0007\u000b\u0002\u0002\u00ad\u00b0\t\u0003\u0002\u0002\u00ae\u00af",
    "\u0007\n\u0002\u0002\u00af\u00b1\u0007k\u0002\u0002\u00b0\u00ae\u0003",
    "\u0002\u0002\u0002\u00b0\u00b1\u0003\u0002\u0002\u0002\u00b1\u00b2\u0003",
    "\u0002\u0002\u0002\u00b2\u00b3\u0007\r\u0002\u0002\u00b3\u00b4\u0007",
    "l\u0002\u0002\u00b4\u00c5\u0007\u0004\u0002\u0002\u00b5\u00b6\u0007",
    "\u000b\u0002\u0002\u00b6\u00b7\u0007\u000e\u0002\u0002\u00b7\u00bc\u0005",
    "\u0010\t\u0002\u00b8\u00b9\u0007\u000f\u0002\u0002\u00b9\u00bb\u0005",
    "\u0010\t\u0002\u00ba\u00b8\u0003\u0002\u0002\u0002\u00bb\u00be\u0003",
    "\u0002\u0002\u0002\u00bc\u00ba\u0003\u0002\u0002\u0002\u00bc\u00bd\u0003",
    "\u0002\u0002\u0002\u00bd\u00bf\u0003\u0002\u0002\u0002\u00be\u00bc\u0003",
    "\u0002\u0002\u0002\u00bf\u00c0\u0007\u0010\u0002\u0002\u00c0\u00c1\u0007",
    "\r\u0002\u0002\u00c1\u00c2\u0007l\u0002\u0002\u00c2\u00c3\u0007\u0004",
    "\u0002\u0002\u00c3\u00c5\u0003\u0002\u0002\u0002\u00c4\u00a5\u0003\u0002",
    "\u0002\u0002\u00c4\u00ac\u0003\u0002\u0002\u0002\u00c4\u00b5\u0003\u0002",
    "\u0002\u0002\u00c5\u0013\u0003\u0002\u0002\u0002\u00c6\u00c7\t\u0004",
    "\u0002\u0002\u00c7\u00d1\u0007k\u0002\u0002\u00c8\u00c9\u0007\u0014",
    "\u0002\u0002\u00c9\u00ce\u0005\u0016\f\u0002\u00ca\u00cb\u0007\u000f",
    "\u0002\u0002\u00cb\u00cd\u0005\u0016\f\u0002\u00cc\u00ca\u0003\u0002",
    "\u0002\u0002\u00cd\u00d0\u0003\u0002\u0002\u0002\u00ce\u00cc\u0003\u0002",
    "\u0002\u0002\u00ce\u00cf\u0003\u0002\u0002\u0002\u00cf\u00d2\u0003\u0002",
    "\u0002\u0002\u00d0\u00ce\u0003\u0002\u0002\u0002\u00d1\u00c8\u0003\u0002",
    "\u0002\u0002\u00d1\u00d2\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002",
    "\u0002\u0002\u00d3\u00d7\u0007\u000e\u0002\u0002\u00d4\u00d6\u0005\u0018",
    "\r\u0002\u00d5\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d9\u0003\u0002",
    "\u0002\u0002\u00d7\u00d5\u0003\u0002\u0002\u0002\u00d7\u00d8\u0003\u0002",
    "\u0002\u0002\u00d8\u00da\u0003\u0002\u0002\u0002\u00d9\u00d7\u0003\u0002",
    "\u0002\u0002\u00da\u00db\u0007\u0010\u0002\u0002\u00db\u0015\u0003\u0002",
    "\u0002\u0002\u00dc\u00e8\u0005:\u001e\u0002\u00dd\u00de\u0007\u0015",
    "\u0002\u0002\u00de\u00e3\u0005b2\u0002\u00df\u00e0\u0007\u000f\u0002",
    "\u0002\u00e0\u00e2\u0005b2\u0002\u00e1\u00df\u0003\u0002\u0002\u0002",
    "\u00e2\u00e5\u0003\u0002\u0002\u0002\u00e3\u00e1\u0003\u0002\u0002\u0002",
    "\u00e3\u00e4\u0003\u0002\u0002\u0002\u00e4\u00e6\u0003\u0002\u0002\u0002",
    "\u00e5\u00e3\u0003\u0002\u0002\u0002\u00e6\u00e7\u0007\u0016\u0002\u0002",
    "\u00e7\u00e9\u0003\u0002\u0002\u0002\u00e8\u00dd\u0003\u0002\u0002\u0002",
    "\u00e8\u00e9\u0003\u0002\u0002\u0002\u00e9\u0017\u0003\u0002\u0002\u0002",
    "\u00ea\u00f2\u0005\u001a\u000e\u0002\u00eb\u00f2\u0005\u001c\u000f\u0002",
    "\u00ec\u00f2\u0005\u001e\u0010\u0002\u00ed\u00f2\u0005 \u0011\u0002",
    "\u00ee\u00f2\u0005$\u0013\u0002\u00ef\u00f2\u0005*\u0016\u0002\u00f0",
    "\u00f2\u0005.\u0018\u0002\u00f1\u00ea\u0003\u0002\u0002\u0002\u00f1",
    "\u00eb\u0003\u0002\u0002\u0002\u00f1\u00ec\u0003\u0002\u0002\u0002\u00f1",
    "\u00ed\u0003\u0002\u0002\u0002\u00f1\u00ee\u0003\u0002\u0002\u0002\u00f1",
    "\u00ef\u0003\u0002\u0002\u0002\u00f1\u00f0\u0003\u0002\u0002\u0002\u00f2",
    "\u0019\u0003\u0002\u0002\u0002\u00f3\u00f7\u00058\u001d\u0002\u00f4",
    "\u00f6\t\u0005\u0002\u0002\u00f5\u00f4\u0003\u0002\u0002\u0002\u00f6",
    "\u00f9\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002\u00f7",
    "\u00f8\u0003\u0002\u0002\u0002\u00f8\u00fa\u0003\u0002\u0002\u0002\u00f9",
    "\u00f7\u0003\u0002\u0002\u0002\u00fa\u00fd\u0007k\u0002\u0002\u00fb",
    "\u00fc\u0007\u001b\u0002\u0002\u00fc\u00fe\u0005b2\u0002\u00fd\u00fb",
    "\u0003\u0002\u0002\u0002\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe\u00ff",
    "\u0003\u0002\u0002\u0002\u00ff\u0100\u0007\u0004\u0002\u0002\u0100\u001b",
    "\u0003\u0002\u0002\u0002\u0101\u0102\u0007\u001c\u0002\u0002\u0102\u0103",
    "\u0007k\u0002\u0002\u0103\u0106\u0007\u001d\u0002\u0002\u0104\u0107",
    "\u0007\f\u0002\u0002\u0105\u0107\u00058\u001d\u0002\u0106\u0104\u0003",
    "\u0002\u0002\u0002\u0106\u0105\u0003\u0002\u0002\u0002\u0107\u0108\u0003",
    "\u0002\u0002\u0002\u0108\u0109\u0007\u0004\u0002\u0002\u0109\u001d\u0003",
    "\u0002\u0002\u0002\u010a\u010b\u0007\u001e\u0002\u0002\u010b\u010c\u0007",
    "k\u0002\u0002\u010c\u0117\u0007\u000e\u0002\u0002\u010d\u010e\u0005",
    "6\u001c\u0002\u010e\u0114\u0007\u0004\u0002\u0002\u010f\u0110\u0005",
    "6\u001c\u0002\u0110\u0111\u0007\u0004\u0002\u0002\u0111\u0113\u0003",
    "\u0002\u0002\u0002\u0112\u010f\u0003\u0002\u0002\u0002\u0113\u0116\u0003",
    "\u0002\u0002\u0002\u0114\u0112\u0003\u0002\u0002\u0002\u0114\u0115\u0003",
    "\u0002\u0002\u0002\u0115\u0118\u0003\u0002\u0002\u0002\u0116\u0114\u0003",
    "\u0002\u0002\u0002\u0117\u010d\u0003\u0002\u0002\u0002\u0117\u0118\u0003",
    "\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u011a\u0007",
    "\u0010\u0002\u0002\u011a\u001f\u0003\u0002\u0002\u0002\u011b\u011c\u0007",
    "\u001f\u0002\u0002\u011c\u011e\u0007k\u0002\u0002\u011d\u011f\u0005",
    "2\u001a\u0002\u011e\u011d\u0003\u0002\u0002\u0002\u011e\u011f\u0003",
    "\u0002\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u0121\u0005",
    "B\"\u0002\u0121!\u0003\u0002\u0002\u0002\u0122\u0128\u0007k\u0002\u0002",
    "\u0123\u0125\u0007\u0015\u0002\u0002\u0124\u0126\u0005f4\u0002\u0125",
    "\u0124\u0003\u0002\u0002\u0002\u0125\u0126\u0003\u0002\u0002\u0002\u0126",
    "\u0127\u0003\u0002\u0002\u0002\u0127\u0129\u0007\u0016\u0002\u0002\u0128",
    "\u0123\u0003\u0002\u0002\u0002\u0128\u0129\u0003\u0002\u0002\u0002\u0129",
    "#\u0003\u0002\u0002\u0002\u012a\u012c\u0007 \u0002\u0002\u012b\u012d",
    "\u0007k\u0002\u0002\u012c\u012b\u0003\u0002\u0002\u0002\u012c\u012d",
    "\u0003\u0002\u0002\u0002\u012d\u012e\u0003\u0002\u0002\u0002\u012e\u012f",
    "\u00052\u001a\u0002\u012f\u0131\u0005(\u0015\u0002\u0130\u0132\u0005",
    "&\u0014\u0002\u0131\u0130\u0003\u0002\u0002\u0002\u0131\u0132\u0003",
    "\u0002\u0002\u0002\u0132\u0135\u0003\u0002\u0002\u0002\u0133\u0136\u0007",
    "\u0004\u0002\u0002\u0134\u0136\u0005B\"\u0002\u0135\u0133\u0003\u0002",
    "\u0002\u0002\u0135\u0134\u0003\u0002\u0002\u0002\u0136%\u0003\u0002",
    "\u0002\u0002\u0137\u0138\u0007!\u0002\u0002\u0138\u0139\u00052\u001a",
    "\u0002\u0139\'\u0003\u0002\u0002\u0002\u013a\u0142\u0005\"\u0012\u0002",
    "\u013b\u0142\u0007\u001a\u0002\u0002\u013c\u0142\u0007\"\u0002\u0002",
    "\u013d\u0142\u0007#\u0002\u0002\u013e\u0142\u0007\u0017\u0002\u0002",
    "\u013f\u0142\u0007\u0018\u0002\u0002\u0140\u0142\u0007\u0019\u0002\u0002",
    "\u0141\u013a\u0003\u0002\u0002\u0002\u0141\u013b\u0003\u0002\u0002\u0002",
    "\u0141\u013c\u0003\u0002\u0002\u0002\u0141\u013d\u0003\u0002\u0002\u0002",
    "\u0141\u013e\u0003\u0002\u0002\u0002\u0141\u013f\u0003\u0002\u0002\u0002",
    "\u0141\u0140\u0003\u0002\u0002\u0002\u0142\u0145\u0003\u0002\u0002\u0002",
    "\u0143\u0141\u0003\u0002\u0002\u0002\u0143\u0144\u0003\u0002\u0002\u0002",
    "\u0144)\u0003\u0002\u0002\u0002\u0145\u0143\u0003\u0002\u0002\u0002",
    "\u0146\u0147\u0007$\u0002\u0002\u0147\u0148\u0007k\u0002\u0002\u0148",
    "\u014a\u00050\u0019\u0002\u0149\u014b\u0007%\u0002\u0002\u014a\u0149",
    "\u0003\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b\u014c",
    "\u0003\u0002\u0002\u0002\u014c\u014d\u0007\u0004\u0002\u0002\u014d+",
    "\u0003\u0002\u0002\u0002\u014e\u014f\u0007k\u0002\u0002\u014f-\u0003",
    "\u0002\u0002\u0002\u0150\u0151\u0007&\u0002\u0002\u0151\u0152\u0007",
    "k\u0002\u0002\u0152\u0154\u0007\u000e\u0002\u0002\u0153\u0155\u0005",
    ",\u0017\u0002\u0154\u0153\u0003\u0002\u0002\u0002\u0154\u0155\u0003",
    "\u0002\u0002\u0002\u0155\u015a\u0003\u0002\u0002\u0002\u0156\u0157\u0007",
    "\u000f\u0002\u0002\u0157\u0159\u0005,\u0017\u0002\u0158\u0156\u0003",
    "\u0002\u0002\u0002\u0159\u015c\u0003\u0002\u0002\u0002\u015a\u0158\u0003",
    "\u0002\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u015d\u0003",
    "\u0002\u0002\u0002\u015c\u015a\u0003\u0002\u0002\u0002\u015d\u015e\u0007",
    "\u0010\u0002\u0002\u015e/\u0003\u0002\u0002\u0002\u015f\u0174\u0007",
    "\u0015\u0002\u0002\u0160\u0162\u00058\u001d\u0002\u0161\u0163\u0007",
    "\'\u0002\u0002\u0162\u0161\u0003\u0002\u0002\u0002\u0162\u0163\u0003",
    "\u0002\u0002\u0002\u0163\u0165\u0003\u0002\u0002\u0002\u0164\u0166\u0007",
    "k\u0002\u0002\u0165\u0164\u0003\u0002\u0002\u0002\u0165\u0166\u0003",
    "\u0002\u0002\u0002\u0166\u0171\u0003\u0002\u0002\u0002\u0167\u0168\u0007",
    "\u000f\u0002\u0002\u0168\u016a\u00058\u001d\u0002\u0169\u016b\u0007",
    "\'\u0002\u0002\u016a\u0169\u0003\u0002\u0002\u0002\u016a\u016b\u0003",
    "\u0002\u0002\u0002\u016b\u016d\u0003\u0002\u0002\u0002\u016c\u016e\u0007",
    "k\u0002\u0002\u016d\u016c\u0003\u0002\u0002\u0002\u016d\u016e\u0003",
    "\u0002\u0002\u0002\u016e\u0170\u0003\u0002\u0002\u0002\u016f\u0167\u0003",
    "\u0002\u0002\u0002\u0170\u0173\u0003\u0002\u0002\u0002\u0171\u016f\u0003",
    "\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002\u0172\u0175\u0003",
    "\u0002\u0002\u0002\u0173\u0171\u0003\u0002\u0002\u0002\u0174\u0160\u0003",
    "\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002\u0002\u0175\u0176\u0003",
    "\u0002\u0002\u0002\u0176\u0177\u0007\u0016\u0002\u0002\u01771\u0003",
    "\u0002\u0002\u0002\u0178\u0187\u0007\u0015\u0002\u0002\u0179\u017b\u0005",
    "8\u001d\u0002\u017a\u017c\u0007k\u0002\u0002\u017b\u017a\u0003\u0002",
    "\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u0184\u0003\u0002",
    "\u0002\u0002\u017d\u017e\u0007\u000f\u0002\u0002\u017e\u0180\u00058",
    "\u001d\u0002\u017f\u0181\u0007k\u0002\u0002\u0180\u017f\u0003\u0002",
    "\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0183\u0003\u0002",
    "\u0002\u0002\u0182\u017d\u0003\u0002\u0002\u0002\u0183\u0186\u0003\u0002",
    "\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002",
    "\u0002\u0002\u0185\u0188\u0003\u0002\u0002\u0002\u0186\u0184\u0003\u0002",
    "\u0002\u0002\u0187\u0179\u0003\u0002\u0002\u0002\u0187\u0188\u0003\u0002",
    "\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189\u018a\u0007\u0016",
    "\u0002\u0002\u018a3\u0003\u0002\u0002\u0002\u018b\u0194\u0007\u0015",
    "\u0002\u0002\u018c\u0191\u00058\u001d\u0002\u018d\u018e\u0007\u000f",
    "\u0002\u0002\u018e\u0190\u00058\u001d\u0002\u018f\u018d\u0003\u0002",
    "\u0002\u0002\u0190\u0193\u0003\u0002\u0002\u0002\u0191\u018f\u0003\u0002",
    "\u0002\u0002\u0191\u0192\u0003\u0002\u0002\u0002\u0192\u0195\u0003\u0002",
    "\u0002\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0194\u018c\u0003\u0002",
    "\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002",
    "\u0002\u0002\u0196\u0197\u0007\u0016\u0002\u0002\u01975\u0003\u0002",
    "\u0002\u0002\u0198\u019a\u00058\u001d\u0002\u0199\u019b\u0005@!\u0002",
    "\u019a\u0199\u0003\u0002\u0002\u0002\u019a\u019b\u0003\u0002\u0002\u0002",
    "\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u019d\u0007k\u0002\u0002",
    "\u019d7\u0003\u0002\u0002\u0002\u019e\u019f\b\u001d\u0001\u0002\u019f",
    "\u01a4\u0005`1\u0002\u01a0\u01a4\u0005:\u001e\u0002\u01a1\u01a4\u0005",
    "<\u001f\u0002\u01a2\u01a4\u0005> \u0002\u01a3\u019e\u0003\u0002\u0002",
    "\u0002\u01a3\u01a0\u0003\u0002\u0002\u0002\u01a3\u01a1\u0003\u0002\u0002",
    "\u0002\u01a3\u01a2\u0003\u0002\u0002\u0002\u01a4\u01ad\u0003\u0002\u0002",
    "\u0002\u01a5\u01a6\f\u0004\u0002\u0002\u01a6\u01a8\u0007(\u0002\u0002",
    "\u01a7\u01a9\u0005b2\u0002\u01a8\u01a7\u0003\u0002\u0002\u0002\u01a8",
    "\u01a9\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa",
    "\u01ac\u0007)\u0002\u0002\u01ab\u01a5\u0003\u0002\u0002\u0002\u01ac",
    "\u01af\u0003\u0002\u0002\u0002\u01ad\u01ab\u0003\u0002\u0002\u0002\u01ad",
    "\u01ae\u0003\u0002\u0002\u0002\u01ae9\u0003\u0002\u0002\u0002\u01af",
    "\u01ad\u0003\u0002\u0002\u0002\u01b0\u01b5\u0007k\u0002\u0002\u01b1",
    "\u01b2\u0007*\u0002\u0002\u01b2\u01b4\u0007k\u0002\u0002\u01b3\u01b1",
    "\u0003\u0002\u0002\u0002\u01b4\u01b7\u0003\u0002\u0002\u0002\u01b5\u01b3",
    "\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002\u01b6;",
    "\u0003\u0002\u0002\u0002\u01b7\u01b5\u0003\u0002\u0002\u0002\u01b8\u01b9",
    "\u0007+\u0002\u0002\u01b9\u01ba\u0007\u0015\u0002\u0002\u01ba\u01bb",
    "\u0005`1\u0002\u01bb\u01bc\u0007,\u0002\u0002\u01bc\u01bd\u00058\u001d",
    "\u0002\u01bd\u01be\u0007\u0016\u0002\u0002\u01be=\u0003\u0002\u0002",
    "\u0002\u01bf\u01c0\u0007 \u0002\u0002\u01c0\u01c4\u00054\u001b\u0002",
    "\u01c1\u01c3\t\u0006\u0002\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002",
    "\u01c3\u01c6\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002",
    "\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5\u01c9\u0003\u0002\u0002\u0002",
    "\u01c6\u01c4\u0003\u0002\u0002\u0002\u01c7\u01c8\u0007!\u0002\u0002",
    "\u01c8\u01ca\u00054\u001b\u0002\u01c9\u01c7\u0003\u0002\u0002\u0002",
    "\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca?\u0003\u0002\u0002\u0002",
    "\u01cb\u01cc\t\u0007\u0002\u0002\u01ccA\u0003\u0002\u0002\u0002\u01cd",
    "\u01d1\u0007\u000e\u0002\u0002\u01ce\u01d0\u0005D#\u0002\u01cf\u01ce",
    "\u0003\u0002\u0002\u0002\u01d0\u01d3\u0003\u0002\u0002\u0002\u01d1\u01cf",
    "\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d4",
    "\u0003\u0002\u0002\u0002\u01d3\u01d1\u0003\u0002\u0002\u0002\u01d4\u01d5",
    "\u0007\u0010\u0002\u0002\u01d5C\u0003\u0002\u0002\u0002\u01d6\u01e2",
    "\u0005H%\u0002\u01d7\u01e2\u0005J&\u0002\u01d8\u01e2\u0005N(\u0002\u01d9",
    "\u01e2\u0005B\"\u0002\u01da\u01e2\u0005P)\u0002\u01db\u01e2\u0005R*",
    "\u0002\u01dc\u01e2\u0005T+\u0002\u01dd\u01e2\u0005V,\u0002\u01de\u01e2",
    "\u0005X-\u0002\u01df\u01e2\u0005Z.\u0002\u01e0\u01e2\u0005L\'\u0002",
    "\u01e1\u01d6\u0003\u0002\u0002\u0002\u01e1\u01d7\u0003\u0002\u0002\u0002",
    "\u01e1\u01d8\u0003\u0002\u0002\u0002\u01e1\u01d9\u0003\u0002\u0002\u0002",
    "\u01e1\u01da\u0003\u0002\u0002\u0002\u01e1\u01db\u0003\u0002\u0002\u0002",
    "\u01e1\u01dc\u0003\u0002\u0002\u0002\u01e1\u01dd\u0003\u0002\u0002\u0002",
    "\u01e1\u01de\u0003\u0002\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002",
    "\u01e1\u01e0\u0003\u0002\u0002\u0002\u01e2E\u0003\u0002\u0002\u0002",
    "\u01e3\u01e4\u0005b2\u0002\u01e4\u01e5\u0007\u0004\u0002\u0002\u01e5",
    "G\u0003\u0002\u0002\u0002\u01e6\u01e7\u0007/\u0002\u0002\u01e7\u01e8",
    "\u0007\u0015\u0002\u0002\u01e8\u01e9\u0005b2\u0002\u01e9\u01ea\u0007",
    "\u0016\u0002\u0002\u01ea\u01ed\u0005D#\u0002\u01eb\u01ec\u00070\u0002",
    "\u0002\u01ec\u01ee\u0005D#\u0002\u01ed\u01eb\u0003\u0002\u0002\u0002",
    "\u01ed\u01ee\u0003\u0002\u0002\u0002\u01eeI\u0003\u0002\u0002\u0002",
    "\u01ef\u01f0\u00071\u0002\u0002\u01f0\u01f1\u0007\u0015\u0002\u0002",
    "\u01f1\u01f2\u0005b2\u0002\u01f2\u01f3\u0007\u0016\u0002\u0002\u01f3",
    "\u01f4\u0005D#\u0002\u01f4K\u0003\u0002\u0002\u0002\u01f5\u01f8\u0005",
    "\\/\u0002\u01f6\u01f8\u0005F$\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002",
    "\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f8M\u0003\u0002\u0002\u0002",
    "\u01f9\u01fa\u0007\u001d\u0002\u0002\u01fa\u01fd\u0007\u0015\u0002\u0002",
    "\u01fb\u01fe\u0005L\'\u0002\u01fc\u01fe\u0007\u0004\u0002\u0002\u01fd",
    "\u01fb\u0003\u0002\u0002\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fe",
    "\u0200\u0003\u0002\u0002\u0002\u01ff\u0201\u0005b2\u0002\u0200\u01ff",
    "\u0003\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201\u0202",
    "\u0003\u0002\u0002\u0002\u0202\u0204\u0007\u0004\u0002\u0002\u0203\u0205",
    "\u0005b2\u0002\u0204\u0203\u0003\u0002\u0002\u0002\u0204\u0205\u0003",
    "\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0207\u0007",
    "\u0016\u0002\u0002\u0207\u0208\u0005D#\u0002\u0208O\u0003\u0002\u0002",
    "\u0002\u0209\u020b\u00072\u0002\u0002\u020a\u020c\u0007l\u0002\u0002",
    "\u020b\u020a\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002",
    "\u020c\u020d\u0003\u0002\u0002\u0002\u020d\u020e\u0005n8\u0002\u020e",
    "Q\u0003\u0002\u0002\u0002\u020f\u0210\u00073\u0002\u0002\u0210\u0211",
    "\u0005D#\u0002\u0211\u0212\u00071\u0002\u0002\u0212\u0213\u0007\u0015",
    "\u0002\u0002\u0213\u0214\u0005b2\u0002\u0214\u0215\u0007\u0016\u0002",
    "\u0002\u0215\u0216\u0007\u0004\u0002\u0002\u0216S\u0003\u0002\u0002",
    "\u0002\u0217\u0218\u00074\u0002\u0002\u0218\u0219\u0007\u0004\u0002",
    "\u0002\u0219U\u0003\u0002\u0002\u0002\u021a\u021b\u00075\u0002\u0002",
    "\u021b\u021c\u0007\u0004\u0002\u0002\u021cW\u0003\u0002\u0002\u0002",
    "\u021d\u021f\u00076\u0002\u0002\u021e\u0220\u0005b2\u0002\u021f\u021e",
    "\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0221",
    "\u0003\u0002\u0002\u0002\u0221\u0222\u0007\u0004\u0002\u0002\u0222Y",
    "\u0003\u0002\u0002\u0002\u0223\u0224\u00077\u0002\u0002\u0224\u0225",
    "\u0007\u0004\u0002\u0002\u0225[\u0003\u0002\u0002\u0002\u0226\u0227",
    "\u00078\u0002\u0002\u0227\u022a\u0005^0\u0002\u0228\u022a\u00056\u001c",
    "\u0002\u0229\u0226\u0003\u0002\u0002\u0002\u0229\u0228\u0003\u0002\u0002",
    "\u0002\u022a\u022d\u0003\u0002\u0002\u0002\u022b\u022c\u0007\u001b\u0002",
    "\u0002\u022c\u022e\u0005b2\u0002\u022d\u022b\u0003\u0002\u0002\u0002",
    "\u022d\u022e\u0003\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002",
    "\u022f\u0230\u0007\u0004\u0002\u0002\u0230]\u0003\u0002\u0002\u0002",
    "\u0231\u0238\u0007\u0015\u0002\u0002\u0232\u0234\u0007k\u0002\u0002",
    "\u0233\u0232\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002",
    "\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0237\u0007\u000f\u0002\u0002",
    "\u0236\u0233\u0003\u0002\u0002\u0002\u0237\u023a\u0003\u0002\u0002\u0002",
    "\u0238\u0236\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002",
    "\u0239\u023c\u0003\u0002\u0002\u0002\u023a\u0238\u0003\u0002\u0002\u0002",
    "\u023b\u023d\u0007k\u0002\u0002\u023c\u023b\u0003\u0002\u0002\u0002",
    "\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002",
    "\u023e\u023f\u0007\u0016\u0002\u0002\u023f_\u0003\u0002\u0002\u0002",
    "\u0240\u0241\t\b\u0002\u0002\u0241a\u0003\u0002\u0002\u0002\u0242\u0243",
    "\b2\u0001\u0002\u0243\u0244\u0007>\u0002\u0002\u0244\u0255\u00058\u001d",
    "\u0002\u0245\u0246\u0007\u0015\u0002\u0002\u0246\u0247\u0005b2\u0002",
    "\u0247\u0248\u0007\u0016\u0002\u0002\u0248\u0255\u0003\u0002\u0002\u0002",
    "\u0249\u024a\t\t\u0002\u0002\u024a\u0255\u0005b2\u0016\u024b\u024c\t",
    "\n\u0002\u0002\u024c\u0255\u0005b2\u0015\u024d\u024e\t\u000b\u0002\u0002",
    "\u024e\u0255\u0005b2\u0014\u024f\u0250\u0007C\u0002\u0002\u0250\u0255",
    "\u0005b2\u0013\u0251\u0252\u0007D\u0002\u0002\u0252\u0255\u0005b2\u0012",
    "\u0253\u0255\u0005d3\u0002\u0254\u0242\u0003\u0002\u0002\u0002\u0254",
    "\u0245\u0003\u0002\u0002\u0002\u0254\u0249\u0003\u0002\u0002\u0002\u0254",
    "\u024b\u0003\u0002\u0002\u0002\u0254\u024d\u0003\u0002\u0002\u0002\u0254",
    "\u024f\u0003\u0002\u0002\u0002\u0254\u0251\u0003\u0002\u0002\u0002\u0254",
    "\u0253\u0003\u0002\u0002\u0002\u0255\u0294\u0003\u0002\u0002\u0002\u0256",
    "\u0257\f\u0011\u0002\u0002\u0257\u0258\u0007E\u0002\u0002\u0258\u0293",
    "\u0005b2\u0012\u0259\u025a\f\u0010\u0002\u0002\u025a\u025b\t\f\u0002",
    "\u0002\u025b\u0293\u0005b2\u0011\u025c\u025d\f\u000f\u0002\u0002\u025d",
    "\u025e\t\n\u0002\u0002\u025e\u0293\u0005b2\u0010\u025f\u0260\f\u000e",
    "\u0002\u0002\u0260\u0261\t\r\u0002\u0002\u0261\u0293\u0005b2\u000f\u0262",
    "\u0263\f\r\u0002\u0002\u0263\u0264\u0007J\u0002\u0002\u0264\u0293\u0005",
    "b2\u000e\u0265\u0266\f\f\u0002\u0002\u0266\u0267\u0007\u0005\u0002\u0002",
    "\u0267\u0293\u0005b2\r\u0268\u0269\f\u000b\u0002\u0002\u0269\u026a\u0007",
    "K\u0002\u0002\u026a\u0293\u0005b2\f\u026b\u026c\f\n\u0002\u0002\u026c",
    "\u026d\t\u000e\u0002\u0002\u026d\u0293\u0005b2\u000b\u026e\u026f\f\t",
    "\u0002\u0002\u026f\u0270\t\u000f\u0002\u0002\u0270\u0293\u0005b2\n\u0271",
    "\u0272\f\b\u0002\u0002\u0272\u0273\u0007N\u0002\u0002\u0273\u0293\u0005",
    "b2\t\u0274\u0275\f\u0007\u0002\u0002\u0275\u0276\u0007O\u0002\u0002",
    "\u0276\u0293\u0005b2\b\u0277\u0278\f\u0006\u0002\u0002\u0278\u0279\u0007",
    "P\u0002\u0002\u0279\u027a\u0005b2\u0002\u027a\u027b\u0007Q\u0002\u0002",
    "\u027b\u027c\u0005b2\u0007\u027c\u0293\u0003\u0002\u0002\u0002\u027d",
    "\u027e\f\u0005\u0002\u0002\u027e\u027f\t\u0010\u0002\u0002\u027f\u0293",
    "\u0005b2\u0006\u0280\u0281\f\u0004\u0002\u0002\u0281\u0282\u0007\u000f",
    "\u0002\u0002\u0282\u0293\u0005b2\u0005\u0283\u0284\f\u001c\u0002\u0002",
    "\u0284\u0293\t\t\u0002\u0002\u0285\u0286\f\u001a\u0002\u0002\u0286\u0287",
    "\u0007(\u0002\u0002\u0287\u0288\u0005b2\u0002\u0288\u0289\u0007)\u0002",
    "\u0002\u0289\u0293\u0003\u0002\u0002\u0002\u028a\u028b\f\u0019\u0002",
    "\u0002\u028b\u028c\u0007\u0015\u0002\u0002\u028c\u028d\u0005l7\u0002",
    "\u028d\u028e\u0007\u0016\u0002\u0002\u028e\u0293\u0003\u0002\u0002\u0002",
    "\u028f\u0290\f\u0018\u0002\u0002\u0290\u0291\u0007*\u0002\u0002\u0291",
    "\u0293\u0007k\u0002\u0002\u0292\u0256\u0003\u0002\u0002\u0002\u0292",
    "\u0259\u0003\u0002\u0002\u0002\u0292\u025c\u0003\u0002\u0002\u0002\u0292",
    "\u025f\u0003\u0002\u0002\u0002\u0292\u0262\u0003\u0002\u0002\u0002\u0292",
    "\u0265\u0003\u0002\u0002\u0002\u0292\u0268\u0003\u0002\u0002\u0002\u0292",
    "\u026b\u0003\u0002\u0002\u0002\u0292\u026e\u0003\u0002\u0002\u0002\u0292",
    "\u0271\u0003\u0002\u0002\u0002\u0292\u0274\u0003\u0002\u0002\u0002\u0292",
    "\u0277\u0003\u0002\u0002\u0002\u0292\u027d\u0003\u0002\u0002\u0002\u0292",
    "\u0280\u0003\u0002\u0002\u0002\u0292\u0283\u0003\u0002\u0002\u0002\u0292",
    "\u0285\u0003\u0002\u0002\u0002\u0292\u028a\u0003\u0002\u0002\u0002\u0292",
    "\u028f\u0003\u0002\u0002\u0002\u0293\u0296\u0003\u0002\u0002\u0002\u0294",
    "\u0292\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295",
    "c\u0003\u0002\u0002\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0297",
    "\u029f\u0007e\u0002\u0002\u0298\u029f\u0005~@\u0002\u0299\u029f\u0007",
    "i\u0002\u0002\u029a\u029f\u0007l\u0002\u0002\u029b\u029f\u0007k\u0002",
    "\u0002\u029c\u029f\u0005z>\u0002\u029d\u029f\u0005|?\u0002\u029e\u0297",
    "\u0003\u0002\u0002\u0002\u029e\u0298\u0003\u0002\u0002\u0002\u029e\u0299",
    "\u0003\u0002\u0002\u0002\u029e\u029a\u0003\u0002\u0002\u0002\u029e\u029b",
    "\u0003\u0002\u0002\u0002\u029e\u029c\u0003\u0002\u0002\u0002\u029e\u029d",
    "\u0003\u0002\u0002\u0002\u029fe\u0003\u0002\u0002\u0002\u02a0\u02a5",
    "\u0005b2\u0002\u02a1\u02a2\u0007\u000f\u0002\u0002\u02a2\u02a4\u0005",
    "b2\u0002\u02a3\u02a1\u0003\u0002\u0002\u0002\u02a4\u02a7\u0003\u0002",
    "\u0002\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002",
    "\u0002\u0002\u02a6g\u0003\u0002\u0002\u0002\u02a7\u02a5\u0003\u0002",
    "\u0002\u0002\u02a8\u02ad\u0005j6\u0002\u02a9\u02aa\u0007\u000f\u0002",
    "\u0002\u02aa\u02ac\u0005j6\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002",
    "\u02ac\u02af\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003\u0002\u0002\u0002",
    "\u02ad\u02ae\u0003\u0002\u0002\u0002\u02ae\u02b1\u0003\u0002\u0002\u0002",
    "\u02af\u02ad\u0003\u0002\u0002\u0002\u02b0\u02b2\u0007\u000f\u0002\u0002",
    "\u02b1\u02b0\u0003\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002",
    "\u02b2i\u0003\u0002\u0002\u0002\u02b3\u02b4\u0007k\u0002\u0002\u02b4",
    "\u02b5\u0007Q\u0002\u0002\u02b5\u02b6\u0005b2\u0002\u02b6k\u0003\u0002",
    "\u0002\u0002\u02b7\u02b9\u0007\u000e\u0002\u0002\u02b8\u02ba\u0005h",
    "5\u0002\u02b9\u02b8\u0003\u0002\u0002\u0002\u02b9\u02ba\u0003\u0002",
    "\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02c0\u0007\u0010",
    "\u0002\u0002\u02bc\u02be\u0005f4\u0002\u02bd\u02bc\u0003\u0002\u0002",
    "\u0002\u02bd\u02be\u0003\u0002\u0002\u0002\u02be\u02c0\u0003\u0002\u0002",
    "\u0002\u02bf\u02b7\u0003\u0002\u0002\u0002\u02bf\u02bd\u0003\u0002\u0002",
    "\u0002\u02c0m\u0003\u0002\u0002\u0002\u02c1\u02c5\u0007\u000e\u0002",
    "\u0002\u02c2\u02c4\u0005p9\u0002\u02c3\u02c2\u0003\u0002\u0002\u0002",
    "\u02c4\u02c7\u0003\u0002\u0002\u0002\u02c5\u02c3\u0003\u0002\u0002\u0002",
    "\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c8\u0003\u0002\u0002\u0002",
    "\u02c7\u02c5\u0003\u0002\u0002\u0002\u02c8\u02c9\u0007\u0010\u0002\u0002",
    "\u02c9o\u0003\u0002\u0002\u0002\u02ca\u02d4\u0007k\u0002\u0002\u02cb",
    "\u02d4\u0005x=\u0002\u02cc\u02d4\u0005n8\u0002\u02cd\u02d4\u0005r:\u0002",
    "\u02ce\u02d4\u0005t;\u0002\u02cf\u02d4\u0005v<\u0002\u02d0\u02d4\u0005",
    "~@\u0002\u02d1\u02d4\u0007l\u0002\u0002\u02d2\u02d4\u0007i\u0002\u0002",
    "\u02d3\u02ca\u0003\u0002\u0002\u0002\u02d3\u02cb\u0003\u0002\u0002\u0002",
    "\u02d3\u02cc\u0003\u0002\u0002\u0002\u02d3\u02cd\u0003\u0002\u0002\u0002",
    "\u02d3\u02ce\u0003\u0002\u0002\u0002\u02d3\u02cf\u0003\u0002\u0002\u0002",
    "\u02d3\u02d0\u0003\u0002\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002",
    "\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d4q\u0003\u0002\u0002\u0002",
    "\u02d5\u02d6\u0007\\\u0002\u0002\u02d6\u02d7\u0007k\u0002\u0002\u02d7",
    "\u02d8\u0007]\u0002\u0002\u02d8\u02d9\u0005x=\u0002\u02d9s\u0003\u0002",
    "\u0002\u0002\u02da\u02db\u0007k\u0002\u0002\u02db\u02dc\u0007]\u0002",
    "\u0002\u02dc\u02e0\u0005x=\u0002\u02dd\u02de\u0007^\u0002\u0002\u02de",
    "\u02e0\u0007k\u0002\u0002\u02df\u02da\u0003\u0002\u0002\u0002\u02df",
    "\u02dd\u0003\u0002\u0002\u0002\u02e0u\u0003\u0002\u0002\u0002\u02e1",
    "\u02e2\u0007k\u0002\u0002\u02e2\u02e3\u0007Q\u0002\u0002\u02e3w\u0003",
    "\u0002\u0002\u0002\u02e4\u02e5\u0007k\u0002\u0002\u02e5\u02e7\u0007",
    "\u0015\u0002\u0002\u02e6\u02e8\u0005p9\u0002\u02e7\u02e6\u0003\u0002",
    "\u0002\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8\u02ed\u0003\u0002",
    "\u0002\u0002\u02e9\u02ea\u0007\u000f\u0002\u0002\u02ea\u02ec\u0005p",
    "9\u0002\u02eb\u02e9\u0003\u0002\u0002\u0002\u02ec\u02ef\u0003\u0002",
    "\u0002\u0002\u02ed\u02eb\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002",
    "\u0002\u0002\u02ee\u02f0\u0003\u0002\u0002\u0002\u02ef\u02ed\u0003\u0002",
    "\u0002\u0002\u02f0\u02f1\u0007\u0016\u0002\u0002\u02f1y\u0003\u0002",
    "\u0002\u0002\u02f2\u02fb\u0007(\u0002\u0002\u02f3\u02f8\u0005b2\u0002",
    "\u02f4\u02f5\u0007\u000f\u0002\u0002\u02f5\u02f7\u0005b2\u0002\u02f6",
    "\u02f4\u0003\u0002\u0002\u0002\u02f7\u02fa\u0003\u0002\u0002\u0002\u02f8",
    "\u02f6\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9",
    "\u02fc\u0003\u0002\u0002\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fb",
    "\u02f3\u0003\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc",
    "\u02fd\u0003\u0002\u0002\u0002\u02fd\u02fe\u0007)\u0002\u0002\u02fe",
    "{\u0003\u0002\u0002\u0002\u02ff\u0300\u0005`1\u0002\u0300}\u0003\u0002",
    "\u0002\u0002\u0301\u0303\t\u0011\u0002\u0002\u0302\u0304\u0007h\u0002",
    "\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0303\u0304\u0003\u0002\u0002",
    "\u0002\u0304\u007f\u0003\u0002\u0002\u0002U\u0083\u0085\u0093\u0097",
    "\u009c\u00a3\u00a9\u00b0\u00bc\u00c4\u00ce\u00d1\u00d7\u00e3\u00e8\u00f1",
    "\u00f7\u00fd\u0106\u0114\u0117\u011e\u0125\u0128\u012c\u0131\u0135\u0141",
    "\u0143\u014a\u0154\u015a\u0162\u0165\u016a\u016d\u0171\u0174\u017b\u0180",
    "\u0184\u0187\u0191\u0194\u019a\u01a3\u01a8\u01ad\u01b5\u01c4\u01c9\u01d1",
    "\u01e1\u01ed\u01f7\u01fd\u0200\u0204\u020b\u021f\u0229\u022d\u0233\u0238",
    "\u023c\u0254\u0292\u0294\u029e\u02a5\u02ad\u02b1\u02b9\u02bd\u02bf\u02c5",
    "\u02d3\u02df\u02e7\u02ed\u02f8\u02fb\u0303"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'pragma'", "';'", "'^'", "'>='", "'>'", "'<'", 
                     "'<='", "'as'", "'import'", "'*'", "'from'", "'{'", 
                     "','", "'}'", "'contract'", "'interface'", "'library'", 
                     "'is'", "'('", "')'", "'public'", "'internal'", "'private'", 
                     "'constant'", "'='", "'using'", "'for'", "'struct'", 
                     "'modifier'", "'function'", "'returns'", "'payable'", 
                     "'external'", "'event'", "'anonymous'", "'enum'", "'indexed'", 
                     "'['", "']'", "'.'", "'mapping'", "'=>'", "'memory'", 
                     "'storage'", "'if'", "'else'", "'while'", "'assembly'", 
                     "'do'", "'continue'", "'break'", "'return'", "'throw'", 
                     "'var'", "'address'", "'bool'", "'string'", "'++'", 
                     "'--'", "'new'", "'+'", "'-'", "'after'", "'delete'", 
                     "'!'", "'~'", "'**'", "'/'", "'%'", "'<<'", "'>>'", 
                     "'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", 
                     "':'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, "Int", "Uint", "Byte", "Fixed", 
                      "Ufixed", "VersionLiteral", "BooleanLiteral", "DecimalNumber", 
                      "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword", 
                      "Identifier", "StringLiteral", "WS", "COMMENT", "LINE_COMMENT" ];

var ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "modifierDefinition", "modifierInvocation", 
                   "functionDefinition", "returnParameters", "modifierList", 
                   "eventDefinition", "enumValue", "enumDefinition", "indexedParameterList", 
                   "parameterList", "typeNameList", "variableDeclaration", 
                   "typeName", "userDefinedTypeName", "mapping", "functionTypeName", 
                   "storageLocation", "block", "statement", "expressionStatement", 
                   "ifStatement", "whileStatement", "simpleStatement", "forStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "variableDeclarationStatement", "identifierList", "elementaryTypeName", 
                   "expression", "primaryExpression", "expressionList", 
                   "nameValueList", "nameValue", "functionCallArguments", 
                   "inlineAssemblyBlock", "assemblyItem", "assemblyLocalBinding", 
                   "assemblyAssignment", "assemblyLabel", "functionalAssemblyExpression", 
                   "arrayLiteral", "elementaryTypeNameExpression", "numberLiteral" ];

function SolidityParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SolidityParser.prototype = Object.create(antlr4.Parser.prototype);
SolidityParser.prototype.constructor = SolidityParser;

Object.defineProperty(SolidityParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SolidityParser.EOF = antlr4.Token.EOF;
SolidityParser.T__0 = 1;
SolidityParser.T__1 = 2;
SolidityParser.T__2 = 3;
SolidityParser.T__3 = 4;
SolidityParser.T__4 = 5;
SolidityParser.T__5 = 6;
SolidityParser.T__6 = 7;
SolidityParser.T__7 = 8;
SolidityParser.T__8 = 9;
SolidityParser.T__9 = 10;
SolidityParser.T__10 = 11;
SolidityParser.T__11 = 12;
SolidityParser.T__12 = 13;
SolidityParser.T__13 = 14;
SolidityParser.T__14 = 15;
SolidityParser.T__15 = 16;
SolidityParser.T__16 = 17;
SolidityParser.T__17 = 18;
SolidityParser.T__18 = 19;
SolidityParser.T__19 = 20;
SolidityParser.T__20 = 21;
SolidityParser.T__21 = 22;
SolidityParser.T__22 = 23;
SolidityParser.T__23 = 24;
SolidityParser.T__24 = 25;
SolidityParser.T__25 = 26;
SolidityParser.T__26 = 27;
SolidityParser.T__27 = 28;
SolidityParser.T__28 = 29;
SolidityParser.T__29 = 30;
SolidityParser.T__30 = 31;
SolidityParser.T__31 = 32;
SolidityParser.T__32 = 33;
SolidityParser.T__33 = 34;
SolidityParser.T__34 = 35;
SolidityParser.T__35 = 36;
SolidityParser.T__36 = 37;
SolidityParser.T__37 = 38;
SolidityParser.T__38 = 39;
SolidityParser.T__39 = 40;
SolidityParser.T__40 = 41;
SolidityParser.T__41 = 42;
SolidityParser.T__42 = 43;
SolidityParser.T__43 = 44;
SolidityParser.T__44 = 45;
SolidityParser.T__45 = 46;
SolidityParser.T__46 = 47;
SolidityParser.T__47 = 48;
SolidityParser.T__48 = 49;
SolidityParser.T__49 = 50;
SolidityParser.T__50 = 51;
SolidityParser.T__51 = 52;
SolidityParser.T__52 = 53;
SolidityParser.T__53 = 54;
SolidityParser.T__54 = 55;
SolidityParser.T__55 = 56;
SolidityParser.T__56 = 57;
SolidityParser.T__57 = 58;
SolidityParser.T__58 = 59;
SolidityParser.T__59 = 60;
SolidityParser.T__60 = 61;
SolidityParser.T__61 = 62;
SolidityParser.T__62 = 63;
SolidityParser.T__63 = 64;
SolidityParser.T__64 = 65;
SolidityParser.T__65 = 66;
SolidityParser.T__66 = 67;
SolidityParser.T__67 = 68;
SolidityParser.T__68 = 69;
SolidityParser.T__69 = 70;
SolidityParser.T__70 = 71;
SolidityParser.T__71 = 72;
SolidityParser.T__72 = 73;
SolidityParser.T__73 = 74;
SolidityParser.T__74 = 75;
SolidityParser.T__75 = 76;
SolidityParser.T__76 = 77;
SolidityParser.T__77 = 78;
SolidityParser.T__78 = 79;
SolidityParser.T__79 = 80;
SolidityParser.T__80 = 81;
SolidityParser.T__81 = 82;
SolidityParser.T__82 = 83;
SolidityParser.T__83 = 84;
SolidityParser.T__84 = 85;
SolidityParser.T__85 = 86;
SolidityParser.T__86 = 87;
SolidityParser.T__87 = 88;
SolidityParser.T__88 = 89;
SolidityParser.T__89 = 90;
SolidityParser.T__90 = 91;
SolidityParser.T__91 = 92;
SolidityParser.Int = 93;
SolidityParser.Uint = 94;
SolidityParser.Byte = 95;
SolidityParser.Fixed = 96;
SolidityParser.Ufixed = 97;
SolidityParser.VersionLiteral = 98;
SolidityParser.BooleanLiteral = 99;
SolidityParser.DecimalNumber = 100;
SolidityParser.HexNumber = 101;
SolidityParser.NumberUnit = 102;
SolidityParser.HexLiteral = 103;
SolidityParser.ReservedKeyword = 104;
SolidityParser.Identifier = 105;
SolidityParser.StringLiteral = 106;
SolidityParser.WS = 107;
SolidityParser.COMMENT = 108;
SolidityParser.LINE_COMMENT = 109;

SolidityParser.RULE_sourceUnit = 0;
SolidityParser.RULE_pragmaDirective = 1;
SolidityParser.RULE_pragmaName = 2;
SolidityParser.RULE_pragmaValue = 3;
SolidityParser.RULE_version = 4;
SolidityParser.RULE_versionOperator = 5;
SolidityParser.RULE_versionConstraint = 6;
SolidityParser.RULE_importDeclaration = 7;
SolidityParser.RULE_importDirective = 8;
SolidityParser.RULE_contractDefinition = 9;
SolidityParser.RULE_inheritanceSpecifier = 10;
SolidityParser.RULE_contractPart = 11;
SolidityParser.RULE_stateVariableDeclaration = 12;
SolidityParser.RULE_usingForDeclaration = 13;
SolidityParser.RULE_structDefinition = 14;
SolidityParser.RULE_modifierDefinition = 15;
SolidityParser.RULE_modifierInvocation = 16;
SolidityParser.RULE_functionDefinition = 17;
SolidityParser.RULE_returnParameters = 18;
SolidityParser.RULE_modifierList = 19;
SolidityParser.RULE_eventDefinition = 20;
SolidityParser.RULE_enumValue = 21;
SolidityParser.RULE_enumDefinition = 22;
SolidityParser.RULE_indexedParameterList = 23;
SolidityParser.RULE_parameterList = 24;
SolidityParser.RULE_typeNameList = 25;
SolidityParser.RULE_variableDeclaration = 26;
SolidityParser.RULE_typeName = 27;
SolidityParser.RULE_userDefinedTypeName = 28;
SolidityParser.RULE_mapping = 29;
SolidityParser.RULE_functionTypeName = 30;
SolidityParser.RULE_storageLocation = 31;
SolidityParser.RULE_block = 32;
SolidityParser.RULE_statement = 33;
SolidityParser.RULE_expressionStatement = 34;
SolidityParser.RULE_ifStatement = 35;
SolidityParser.RULE_whileStatement = 36;
SolidityParser.RULE_simpleStatement = 37;
SolidityParser.RULE_forStatement = 38;
SolidityParser.RULE_inlineAssemblyStatement = 39;
SolidityParser.RULE_doWhileStatement = 40;
SolidityParser.RULE_continueStatement = 41;
SolidityParser.RULE_breakStatement = 42;
SolidityParser.RULE_returnStatement = 43;
SolidityParser.RULE_throwStatement = 44;
SolidityParser.RULE_variableDeclarationStatement = 45;
SolidityParser.RULE_identifierList = 46;
SolidityParser.RULE_elementaryTypeName = 47;
SolidityParser.RULE_expression = 48;
SolidityParser.RULE_primaryExpression = 49;
SolidityParser.RULE_expressionList = 50;
SolidityParser.RULE_nameValueList = 51;
SolidityParser.RULE_nameValue = 52;
SolidityParser.RULE_functionCallArguments = 53;
SolidityParser.RULE_inlineAssemblyBlock = 54;
SolidityParser.RULE_assemblyItem = 55;
SolidityParser.RULE_assemblyLocalBinding = 56;
SolidityParser.RULE_assemblyAssignment = 57;
SolidityParser.RULE_assemblyLabel = 58;
SolidityParser.RULE_functionalAssemblyExpression = 59;
SolidityParser.RULE_arrayLiteral = 60;
SolidityParser.RULE_elementaryTypeNameExpression = 61;
SolidityParser.RULE_numberLiteral = 62;

function SourceUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_sourceUnit;
    return this;
}

SourceUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceUnitContext.prototype.constructor = SourceUnitContext;

SourceUnitContext.prototype.EOF = function() {
    return this.getToken(SolidityParser.EOF, 0);
};

SourceUnitContext.prototype.pragmaDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PragmaDirectiveContext);
    } else {
        return this.getTypedRuleContext(PragmaDirectiveContext,i);
    }
};

SourceUnitContext.prototype.importDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDirectiveContext);
    } else {
        return this.getTypedRuleContext(ImportDirectiveContext,i);
    }
};

SourceUnitContext.prototype.contractDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractDefinitionContext);
    } else {
        return this.getTypedRuleContext(ContractDefinitionContext,i);
    }
};

SourceUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterSourceUnit(this);
	}
};

SourceUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitSourceUnit(this);
	}
};




SolidityParser.SourceUnitContext = SourceUnitContext;

SolidityParser.prototype.sourceUnit = function() {

    var localctx = new SourceUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 131;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__14) | (1 << SolidityParser.T__15) | (1 << SolidityParser.T__16))) !== 0)) {
            this.state = 129;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.T__0:
                this.state = 126;
                this.pragmaDirective();
                break;
            case SolidityParser.T__8:
                this.state = 127;
                this.importDirective();
                break;
            case SolidityParser.T__14:
            case SolidityParser.T__15:
            case SolidityParser.T__16:
                this.state = 128;
                this.contractDefinition();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 133;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 134;
        this.match(SolidityParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaDirective;
    return this;
}

PragmaDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaDirectiveContext.prototype.constructor = PragmaDirectiveContext;

PragmaDirectiveContext.prototype.pragmaName = function() {
    return this.getTypedRuleContext(PragmaNameContext,0);
};

PragmaDirectiveContext.prototype.pragmaValue = function() {
    return this.getTypedRuleContext(PragmaValueContext,0);
};

PragmaDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPragmaDirective(this);
	}
};

PragmaDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPragmaDirective(this);
	}
};




SolidityParser.PragmaDirectiveContext = PragmaDirectiveContext;

SolidityParser.prototype.pragmaDirective = function() {

    var localctx = new PragmaDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 136;
        this.match(SolidityParser.T__0);
        this.state = 137;
        this.pragmaName();
        this.state = 138;
        this.pragmaValue();
        this.state = 139;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaName;
    return this;
}

PragmaNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaNameContext.prototype.constructor = PragmaNameContext;

PragmaNameContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

PragmaNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPragmaName(this);
	}
};

PragmaNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPragmaName(this);
	}
};




SolidityParser.PragmaNameContext = PragmaNameContext;

SolidityParser.prototype.pragmaName = function() {

    var localctx = new PragmaNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SolidityParser.RULE_pragmaName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 141;
        this.match(SolidityParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaValue;
    return this;
}

PragmaValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaValueContext.prototype.constructor = PragmaValueContext;

PragmaValueContext.prototype.version = function() {
    return this.getTypedRuleContext(VersionContext,0);
};

PragmaValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PragmaValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPragmaValue(this);
	}
};

PragmaValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPragmaValue(this);
	}
};




SolidityParser.PragmaValueContext = PragmaValueContext;

SolidityParser.prototype.pragmaValue = function() {

    var localctx = new PragmaValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SolidityParser.RULE_pragmaValue);
    try {
        this.state = 145;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__2:
        case SolidityParser.T__3:
        case SolidityParser.T__4:
        case SolidityParser.T__5:
        case SolidityParser.T__6:
        case SolidityParser.VersionLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 143;
            this.version();
            break;
        case SolidityParser.T__18:
        case SolidityParser.T__37:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.T__58:
        case SolidityParser.T__59:
        case SolidityParser.T__60:
        case SolidityParser.T__61:
        case SolidityParser.T__62:
        case SolidityParser.T__63:
        case SolidityParser.T__64:
        case SolidityParser.T__65:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 144;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_version;
    return this;
}

VersionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionContext.prototype.constructor = VersionContext;

VersionContext.prototype.versionConstraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VersionConstraintContext);
    } else {
        return this.getTypedRuleContext(VersionConstraintContext,i);
    }
};

VersionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVersion(this);
	}
};

VersionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVersion(this);
	}
};




SolidityParser.VersionContext = VersionContext;

SolidityParser.prototype.version = function() {

    var localctx = new VersionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SolidityParser.RULE_version);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 147;
        this.versionConstraint();
        this.state = 149;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0) || _la===SolidityParser.VersionLiteral) {
            this.state = 148;
            this.versionConstraint();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_versionOperator;
    return this;
}

VersionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionOperatorContext.prototype.constructor = VersionOperatorContext;


VersionOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVersionOperator(this);
	}
};

VersionOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVersionOperator(this);
	}
};




SolidityParser.VersionOperatorContext = VersionOperatorContext;

SolidityParser.prototype.versionOperator = function() {

    var localctx = new VersionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SolidityParser.RULE_versionOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 151;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_versionConstraint;
    return this;
}

VersionConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionConstraintContext.prototype.constructor = VersionConstraintContext;

VersionConstraintContext.prototype.VersionLiteral = function() {
    return this.getToken(SolidityParser.VersionLiteral, 0);
};

VersionConstraintContext.prototype.versionOperator = function() {
    return this.getTypedRuleContext(VersionOperatorContext,0);
};

VersionConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVersionConstraint(this);
	}
};

VersionConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVersionConstraint(this);
	}
};




SolidityParser.VersionConstraintContext = VersionConstraintContext;

SolidityParser.prototype.versionConstraint = function() {

    var localctx = new VersionConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SolidityParser.RULE_versionConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0)) {
            this.state = 153;
            this.versionOperator();
        }

        this.state = 156;
        this.match(SolidityParser.VersionLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Identifier);
    } else {
        return this.getToken(SolidityParser.Identifier, i);
    }
};


ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitImportDeclaration(this);
	}
};




SolidityParser.ImportDeclarationContext = ImportDeclarationContext;

SolidityParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SolidityParser.RULE_importDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 158;
        this.match(SolidityParser.Identifier);
        this.state = 161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__7) {
            this.state = 159;
            this.match(SolidityParser.T__7);
            this.state = 160;
            this.match(SolidityParser.Identifier);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importDirective;
    return this;
}

ImportDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDirectiveContext.prototype.constructor = ImportDirectiveContext;

ImportDirectiveContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

ImportDirectiveContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Identifier);
    } else {
        return this.getToken(SolidityParser.Identifier, i);
    }
};


ImportDirectiveContext.prototype.importDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDeclarationContext);
    } else {
        return this.getTypedRuleContext(ImportDeclarationContext,i);
    }
};

ImportDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterImportDirective(this);
	}
};

ImportDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitImportDirective(this);
	}
};




SolidityParser.ImportDirectiveContext = ImportDirectiveContext;

SolidityParser.prototype.importDirective = function() {

    var localctx = new ImportDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SolidityParser.RULE_importDirective);
    var _la = 0; // Token type
    try {
        this.state = 194;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 163;
            this.match(SolidityParser.T__8);
            this.state = 164;
            this.match(SolidityParser.StringLiteral);
            this.state = 167;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__7) {
                this.state = 165;
                this.match(SolidityParser.T__7);
                this.state = 166;
                this.match(SolidityParser.Identifier);
            }

            this.state = 169;
            this.match(SolidityParser.T__1);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 170;
            this.match(SolidityParser.T__8);
            this.state = 171;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__9 || _la===SolidityParser.Identifier)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 174;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__7) {
                this.state = 172;
                this.match(SolidityParser.T__7);
                this.state = 173;
                this.match(SolidityParser.Identifier);
            }

            this.state = 176;
            this.match(SolidityParser.T__10);
            this.state = 177;
            this.match(SolidityParser.StringLiteral);
            this.state = 178;
            this.match(SolidityParser.T__1);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 179;
            this.match(SolidityParser.T__8);
            this.state = 180;
            this.match(SolidityParser.T__11);
            this.state = 181;
            this.importDeclaration();
            this.state = 186;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 182;
                this.match(SolidityParser.T__12);
                this.state = 183;
                this.importDeclaration();
                this.state = 188;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 189;
            this.match(SolidityParser.T__13);
            this.state = 190;
            this.match(SolidityParser.T__10);
            this.state = 191;
            this.match(SolidityParser.StringLiteral);
            this.state = 192;
            this.match(SolidityParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContractDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractDefinition;
    return this;
}

ContractDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractDefinitionContext.prototype.constructor = ContractDefinitionContext;

ContractDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

ContractDefinitionContext.prototype.inheritanceSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InheritanceSpecifierContext);
    } else {
        return this.getTypedRuleContext(InheritanceSpecifierContext,i);
    }
};

ContractDefinitionContext.prototype.contractPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractPartContext);
    } else {
        return this.getTypedRuleContext(ContractPartContext,i);
    }
};

ContractDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterContractDefinition(this);
	}
};

ContractDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitContractDefinition(this);
	}
};




SolidityParser.ContractDefinitionContext = ContractDefinitionContext;

SolidityParser.prototype.contractDefinition = function() {

    var localctx = new ContractDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SolidityParser.RULE_contractDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 196;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__14) | (1 << SolidityParser.T__15) | (1 << SolidityParser.T__16))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 197;
        this.match(SolidityParser.Identifier);
        this.state = 207;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__17) {
            this.state = 198;
            this.match(SolidityParser.T__17);
            this.state = 199;
            this.inheritanceSpecifier();
            this.state = 204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 200;
                this.match(SolidityParser.T__12);
                this.state = 201;
                this.inheritanceSpecifier();
                this.state = 206;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 209;
        this.match(SolidityParser.T__11);
        this.state = 213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 26)) & ~0x1f) == 0 && ((1 << (_la - 26)) & ((1 << (SolidityParser.T__25 - 26)) | (1 << (SolidityParser.T__27 - 26)) | (1 << (SolidityParser.T__28 - 26)) | (1 << (SolidityParser.T__29 - 26)) | (1 << (SolidityParser.T__33 - 26)) | (1 << (SolidityParser.T__35 - 26)) | (1 << (SolidityParser.T__40 - 26)) | (1 << (SolidityParser.T__53 - 26)) | (1 << (SolidityParser.T__54 - 26)) | (1 << (SolidityParser.T__55 - 26)) | (1 << (SolidityParser.T__56 - 26)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
            this.state = 210;
            this.contractPart();
            this.state = 215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 216;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InheritanceSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;
    return this;
}

InheritanceSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritanceSpecifierContext.prototype.constructor = InheritanceSpecifierContext;

InheritanceSpecifierContext.prototype.userDefinedTypeName = function() {
    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
};

InheritanceSpecifierContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InheritanceSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterInheritanceSpecifier(this);
	}
};

InheritanceSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitInheritanceSpecifier(this);
	}
};




SolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext;

SolidityParser.prototype.inheritanceSpecifier = function() {

    var localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 218;
        this.userDefinedTypeName();
        this.state = 230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18) {
            this.state = 219;
            this.match(SolidityParser.T__18);
            this.state = 220;
            this.expression(0);
            this.state = 225;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 221;
                this.match(SolidityParser.T__12);
                this.state = 222;
                this.expression(0);
                this.state = 227;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 228;
            this.match(SolidityParser.T__19);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContractPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractPart;
    return this;
}

ContractPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractPartContext.prototype.constructor = ContractPartContext;

ContractPartContext.prototype.stateVariableDeclaration = function() {
    return this.getTypedRuleContext(StateVariableDeclarationContext,0);
};

ContractPartContext.prototype.usingForDeclaration = function() {
    return this.getTypedRuleContext(UsingForDeclarationContext,0);
};

ContractPartContext.prototype.structDefinition = function() {
    return this.getTypedRuleContext(StructDefinitionContext,0);
};

ContractPartContext.prototype.modifierDefinition = function() {
    return this.getTypedRuleContext(ModifierDefinitionContext,0);
};

ContractPartContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

ContractPartContext.prototype.eventDefinition = function() {
    return this.getTypedRuleContext(EventDefinitionContext,0);
};

ContractPartContext.prototype.enumDefinition = function() {
    return this.getTypedRuleContext(EnumDefinitionContext,0);
};

ContractPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterContractPart(this);
	}
};

ContractPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitContractPart(this);
	}
};




SolidityParser.ContractPartContext = ContractPartContext;

SolidityParser.prototype.contractPart = function() {

    var localctx = new ContractPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SolidityParser.RULE_contractPart);
    try {
        this.state = 239;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 232;
            this.stateVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 233;
            this.usingForDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 234;
            this.structDefinition();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 235;
            this.modifierDefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 236;
            this.functionDefinition();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 237;
            this.eventDefinition();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 238;
            this.enumDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StateVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;
    return this;
}

StateVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateVariableDeclarationContext.prototype.constructor = StateVariableDeclarationContext;

StateVariableDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

StateVariableDeclarationContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

StateVariableDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StateVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStateVariableDeclaration(this);
	}
};

StateVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStateVariableDeclaration(this);
	}
};




SolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext;

SolidityParser.prototype.stateVariableDeclaration = function() {

    var localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SolidityParser.RULE_stateVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 241;
        this.typeName(0);
        this.state = 245;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__20) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__23))) !== 0)) {
            this.state = 242;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__20) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__23))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 247;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 248;
        this.match(SolidityParser.Identifier);
        this.state = 251;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__24) {
            this.state = 249;
            this.match(SolidityParser.T__24);
            this.state = 250;
            this.expression(0);
        }

        this.state = 253;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingForDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_usingForDeclaration;
    return this;
}

UsingForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingForDeclarationContext.prototype.constructor = UsingForDeclarationContext;

UsingForDeclarationContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

UsingForDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

UsingForDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterUsingForDeclaration(this);
	}
};

UsingForDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitUsingForDeclaration(this);
	}
};




SolidityParser.UsingForDeclarationContext = UsingForDeclarationContext;

SolidityParser.prototype.usingForDeclaration = function() {

    var localctx = new UsingForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SolidityParser.RULE_usingForDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 255;
        this.match(SolidityParser.T__25);
        this.state = 256;
        this.match(SolidityParser.Identifier);
        this.state = 257;
        this.match(SolidityParser.T__26);
        this.state = 260;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__9:
            this.state = 258;
            this.match(SolidityParser.T__9);
            break;
        case SolidityParser.T__29:
        case SolidityParser.T__40:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.Identifier:
            this.state = 259;
            this.typeName(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 262;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_structDefinition;
    return this;
}

StructDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDefinitionContext.prototype.constructor = StructDefinitionContext;

StructDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

StructDefinitionContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

StructDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStructDefinition(this);
	}
};

StructDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStructDefinition(this);
	}
};




SolidityParser.StructDefinitionContext = StructDefinitionContext;

SolidityParser.prototype.structDefinition = function() {

    var localctx = new StructDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SolidityParser.RULE_structDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 264;
        this.match(SolidityParser.T__27);
        this.state = 265;
        this.match(SolidityParser.Identifier);
        this.state = 266;
        this.match(SolidityParser.T__11);
        this.state = 277;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (SolidityParser.T__29 - 30)) | (1 << (SolidityParser.T__40 - 30)) | (1 << (SolidityParser.T__53 - 30)) | (1 << (SolidityParser.T__54 - 30)) | (1 << (SolidityParser.T__55 - 30)) | (1 << (SolidityParser.T__56 - 30)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
            this.state = 267;
            this.variableDeclaration();
            this.state = 268;
            this.match(SolidityParser.T__1);
            this.state = 274;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (SolidityParser.T__29 - 30)) | (1 << (SolidityParser.T__40 - 30)) | (1 << (SolidityParser.T__53 - 30)) | (1 << (SolidityParser.T__54 - 30)) | (1 << (SolidityParser.T__55 - 30)) | (1 << (SolidityParser.T__56 - 30)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
                this.state = 269;
                this.variableDeclaration();
                this.state = 270;
                this.match(SolidityParser.T__1);
                this.state = 276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 279;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierDefinition;
    return this;
}

ModifierDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierDefinitionContext.prototype.constructor = ModifierDefinitionContext;

ModifierDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

ModifierDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ModifierDefinitionContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ModifierDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterModifierDefinition(this);
	}
};

ModifierDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitModifierDefinition(this);
	}
};




SolidityParser.ModifierDefinitionContext = ModifierDefinitionContext;

SolidityParser.prototype.modifierDefinition = function() {

    var localctx = new ModifierDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SolidityParser.RULE_modifierDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 281;
        this.match(SolidityParser.T__28);
        this.state = 282;
        this.match(SolidityParser.Identifier);
        this.state = 284;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18) {
            this.state = 283;
            this.parameterList();
        }

        this.state = 286;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierInvocation;
    return this;
}

ModifierInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierInvocationContext.prototype.constructor = ModifierInvocationContext;

ModifierInvocationContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

ModifierInvocationContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ModifierInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterModifierInvocation(this);
	}
};

ModifierInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitModifierInvocation(this);
	}
};




SolidityParser.ModifierInvocationContext = ModifierInvocationContext;

SolidityParser.prototype.modifierInvocation = function() {

    var localctx = new ModifierInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SolidityParser.RULE_modifierInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 288;
        this.match(SolidityParser.Identifier);
        this.state = 294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18) {
            this.state = 289;
            this.match(SolidityParser.T__18);
            this.state = 291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__18 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)) | (1 << (SolidityParser.T__60 - 38)) | (1 << (SolidityParser.T__61 - 38)) | (1 << (SolidityParser.T__62 - 38)) | (1 << (SolidityParser.T__63 - 38)) | (1 << (SolidityParser.T__64 - 38)) | (1 << (SolidityParser.T__65 - 38)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteral - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteral - 93)))) !== 0)) {
                this.state = 290;
                this.expressionList();
            }

            this.state = 293;
            this.match(SolidityParser.T__19);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionDefinitionContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

FunctionDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

FunctionDefinitionContext.prototype.returnParameters = function() {
    return this.getTypedRuleContext(ReturnParametersContext,0);
};

FunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionDefinition(this);
	}
};




SolidityParser.FunctionDefinitionContext = FunctionDefinitionContext;

SolidityParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SolidityParser.RULE_functionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 296;
        this.match(SolidityParser.T__29);
        this.state = 298;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Identifier) {
            this.state = 297;
            this.match(SolidityParser.Identifier);
        }

        this.state = 300;
        this.parameterList();
        this.state = 301;
        this.modifierList();
        this.state = 303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__30) {
            this.state = 302;
            this.returnParameters();
        }

        this.state = 307;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__1:
            this.state = 305;
            this.match(SolidityParser.T__1);
            break;
        case SolidityParser.T__11:
            this.state = 306;
            this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_returnParameters;
    return this;
}

ReturnParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnParametersContext.prototype.constructor = ReturnParametersContext;

ReturnParametersContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ReturnParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterReturnParameters(this);
	}
};

ReturnParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitReturnParameters(this);
	}
};




SolidityParser.ReturnParametersContext = ReturnParametersContext;

SolidityParser.prototype.returnParameters = function() {

    var localctx = new ReturnParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SolidityParser.RULE_returnParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 309;
        this.match(SolidityParser.T__30);
        this.state = 310;
        this.parameterList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierList;
    return this;
}

ModifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierListContext.prototype.constructor = ModifierListContext;

ModifierListContext.prototype.modifierInvocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierInvocationContext);
    } else {
        return this.getTypedRuleContext(ModifierInvocationContext,i);
    }
};

ModifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterModifierList(this);
	}
};

ModifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitModifierList(this);
	}
};




SolidityParser.ModifierListContext = ModifierListContext;

SolidityParser.prototype.modifierList = function() {

    var localctx = new ModifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SolidityParser.RULE_modifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (SolidityParser.T__20 - 21)) | (1 << (SolidityParser.T__21 - 21)) | (1 << (SolidityParser.T__22 - 21)) | (1 << (SolidityParser.T__23 - 21)) | (1 << (SolidityParser.T__31 - 21)) | (1 << (SolidityParser.T__32 - 21)))) !== 0) || _la===SolidityParser.Identifier) {
            this.state = 319;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.Identifier:
                this.state = 312;
                this.modifierInvocation();
                break;
            case SolidityParser.T__23:
                this.state = 313;
                this.match(SolidityParser.T__23);
                break;
            case SolidityParser.T__31:
                this.state = 314;
                this.match(SolidityParser.T__31);
                break;
            case SolidityParser.T__32:
                this.state = 315;
                this.match(SolidityParser.T__32);
                break;
            case SolidityParser.T__20:
                this.state = 316;
                this.match(SolidityParser.T__20);
                break;
            case SolidityParser.T__21:
                this.state = 317;
                this.match(SolidityParser.T__21);
                break;
            case SolidityParser.T__22:
                this.state = 318;
                this.match(SolidityParser.T__22);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 323;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_eventDefinition;
    return this;
}

EventDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefinitionContext.prototype.constructor = EventDefinitionContext;

EventDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

EventDefinitionContext.prototype.indexedParameterList = function() {
    return this.getTypedRuleContext(IndexedParameterListContext,0);
};

EventDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterEventDefinition(this);
	}
};

EventDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitEventDefinition(this);
	}
};




SolidityParser.EventDefinitionContext = EventDefinitionContext;

SolidityParser.prototype.eventDefinition = function() {

    var localctx = new EventDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SolidityParser.RULE_eventDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324;
        this.match(SolidityParser.T__33);
        this.state = 325;
        this.match(SolidityParser.Identifier);
        this.state = 326;
        this.indexedParameterList();
        this.state = 328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__34) {
            this.state = 327;
            this.match(SolidityParser.T__34);
        }

        this.state = 330;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_enumValue;
    return this;
}

EnumValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumValueContext.prototype.constructor = EnumValueContext;

EnumValueContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

EnumValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterEnumValue(this);
	}
};

EnumValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitEnumValue(this);
	}
};




SolidityParser.EnumValueContext = EnumValueContext;

SolidityParser.prototype.enumValue = function() {

    var localctx = new EnumValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SolidityParser.RULE_enumValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.match(SolidityParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_enumDefinition;
    return this;
}

EnumDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDefinitionContext.prototype.constructor = EnumDefinitionContext;

EnumDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

EnumDefinitionContext.prototype.enumValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumValueContext);
    } else {
        return this.getTypedRuleContext(EnumValueContext,i);
    }
};

EnumDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterEnumDefinition(this);
	}
};

EnumDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitEnumDefinition(this);
	}
};




SolidityParser.EnumDefinitionContext = EnumDefinitionContext;

SolidityParser.prototype.enumDefinition = function() {

    var localctx = new EnumDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SolidityParser.RULE_enumDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 334;
        this.match(SolidityParser.T__35);
        this.state = 335;
        this.match(SolidityParser.Identifier);
        this.state = 336;
        this.match(SolidityParser.T__11);
        this.state = 338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Identifier) {
            this.state = 337;
            this.enumValue();
        }

        this.state = 344;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__12) {
            this.state = 340;
            this.match(SolidityParser.T__12);
            this.state = 341;
            this.enumValue();
            this.state = 346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 347;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexedParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_indexedParameterList;
    return this;
}

IndexedParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexedParameterListContext.prototype.constructor = IndexedParameterListContext;

IndexedParameterListContext.prototype.typeName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeNameContext);
    } else {
        return this.getTypedRuleContext(TypeNameContext,i);
    }
};

IndexedParameterListContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Identifier);
    } else {
        return this.getToken(SolidityParser.Identifier, i);
    }
};


IndexedParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIndexedParameterList(this);
	}
};

IndexedParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIndexedParameterList(this);
	}
};




SolidityParser.IndexedParameterListContext = IndexedParameterListContext;

SolidityParser.prototype.indexedParameterList = function() {

    var localctx = new IndexedParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SolidityParser.RULE_indexedParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(SolidityParser.T__18);
        this.state = 370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (SolidityParser.T__29 - 30)) | (1 << (SolidityParser.T__40 - 30)) | (1 << (SolidityParser.T__53 - 30)) | (1 << (SolidityParser.T__54 - 30)) | (1 << (SolidityParser.T__55 - 30)) | (1 << (SolidityParser.T__56 - 30)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
            this.state = 350;
            this.typeName(0);
            this.state = 352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__36) {
                this.state = 351;
                this.match(SolidityParser.T__36);
            }

            this.state = 355;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.Identifier) {
                this.state = 354;
                this.match(SolidityParser.Identifier);
            }

            this.state = 367;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 357;
                this.match(SolidityParser.T__12);
                this.state = 358;
                this.typeName(0);
                this.state = 360;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SolidityParser.T__36) {
                    this.state = 359;
                    this.match(SolidityParser.T__36);
                }

                this.state = 363;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SolidityParser.Identifier) {
                    this.state = 362;
                    this.match(SolidityParser.Identifier);
                }

                this.state = 369;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 372;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.typeName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeNameContext);
    } else {
        return this.getTypedRuleContext(TypeNameContext,i);
    }
};

ParameterListContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Identifier);
    } else {
        return this.getToken(SolidityParser.Identifier, i);
    }
};


ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitParameterList(this);
	}
};




SolidityParser.ParameterListContext = ParameterListContext;

SolidityParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SolidityParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 374;
        this.match(SolidityParser.T__18);
        this.state = 389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (SolidityParser.T__29 - 30)) | (1 << (SolidityParser.T__40 - 30)) | (1 << (SolidityParser.T__53 - 30)) | (1 << (SolidityParser.T__54 - 30)) | (1 << (SolidityParser.T__55 - 30)) | (1 << (SolidityParser.T__56 - 30)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
            this.state = 375;
            this.typeName(0);
            this.state = 377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.Identifier) {
                this.state = 376;
                this.match(SolidityParser.Identifier);
            }

            this.state = 386;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 379;
                this.match(SolidityParser.T__12);
                this.state = 380;
                this.typeName(0);
                this.state = 382;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SolidityParser.Identifier) {
                    this.state = 381;
                    this.match(SolidityParser.Identifier);
                }

                this.state = 388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 391;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_typeNameList;
    return this;
}

TypeNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameListContext.prototype.constructor = TypeNameListContext;

TypeNameListContext.prototype.typeName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeNameContext);
    } else {
        return this.getTypedRuleContext(TypeNameContext,i);
    }
};

TypeNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterTypeNameList(this);
	}
};

TypeNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitTypeNameList(this);
	}
};




SolidityParser.TypeNameListContext = TypeNameListContext;

SolidityParser.prototype.typeNameList = function() {

    var localctx = new TypeNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SolidityParser.RULE_typeNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 393;
        this.match(SolidityParser.T__18);
        this.state = 402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (SolidityParser.T__29 - 30)) | (1 << (SolidityParser.T__40 - 30)) | (1 << (SolidityParser.T__53 - 30)) | (1 << (SolidityParser.T__54 - 30)) | (1 << (SolidityParser.T__55 - 30)) | (1 << (SolidityParser.T__56 - 30)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) !== 0)) {
            this.state = 394;
            this.typeName(0);
            this.state = 399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 395;
                this.match(SolidityParser.T__12);
                this.state = 396;
                this.typeName(0);
                this.state = 401;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 404;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

VariableDeclarationContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

VariableDeclarationContext.prototype.storageLocation = function() {
    return this.getTypedRuleContext(StorageLocationContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVariableDeclaration(this);
	}
};




SolidityParser.VariableDeclarationContext = VariableDeclarationContext;

SolidityParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SolidityParser.RULE_variableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 406;
        this.typeName(0);
        this.state = 408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__42 || _la===SolidityParser.T__43) {
            this.state = 407;
            this.storageLocation();
        }

        this.state = 410;
        this.match(SolidityParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

TypeNameContext.prototype.userDefinedTypeName = function() {
    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
};

TypeNameContext.prototype.mapping = function() {
    return this.getTypedRuleContext(MappingContext,0);
};

TypeNameContext.prototype.functionTypeName = function() {
    return this.getTypedRuleContext(FunctionTypeNameContext,0);
};

TypeNameContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

TypeNameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitTypeName(this);
	}
};



SolidityParser.prototype.typeName = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeNameContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 54;
    this.enterRecursionRule(localctx, 54, SolidityParser.RULE_typeName, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
            this.state = 413;
            this.elementaryTypeName();
            break;
        case SolidityParser.Identifier:
            this.state = 414;
            this.userDefinedTypeName();
            break;
        case SolidityParser.T__40:
            this.state = 415;
            this.mapping();
            break;
        case SolidityParser.T__29:
            this.state = 416;
            this.functionTypeName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 427;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeNameContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);
                this.state = 419;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 420;
                this.match(SolidityParser.T__37);
                this.state = 422;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SolidityParser.T__18 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)) | (1 << (SolidityParser.T__60 - 38)) | (1 << (SolidityParser.T__61 - 38)) | (1 << (SolidityParser.T__62 - 38)) | (1 << (SolidityParser.T__63 - 38)) | (1 << (SolidityParser.T__64 - 38)) | (1 << (SolidityParser.T__65 - 38)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteral - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteral - 93)))) !== 0)) {
                    this.state = 421;
                    this.expression(0);
                }

                this.state = 424;
                this.match(SolidityParser.T__38); 
            }
            this.state = 429;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UserDefinedTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_userDefinedTypeName;
    return this;
}

UserDefinedTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserDefinedTypeNameContext.prototype.constructor = UserDefinedTypeNameContext;

UserDefinedTypeNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Identifier);
    } else {
        return this.getToken(SolidityParser.Identifier, i);
    }
};


UserDefinedTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterUserDefinedTypeName(this);
	}
};

UserDefinedTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitUserDefinedTypeName(this);
	}
};




SolidityParser.UserDefinedTypeNameContext = UserDefinedTypeNameContext;

SolidityParser.prototype.userDefinedTypeName = function() {

    var localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SolidityParser.RULE_userDefinedTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this.match(SolidityParser.Identifier);
        this.state = 435;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 431;
                this.match(SolidityParser.T__39);
                this.state = 432;
                this.match(SolidityParser.Identifier); 
            }
            this.state = 437;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_mapping;
    return this;
}

MappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingContext.prototype.constructor = MappingContext;

MappingContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

MappingContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterMapping(this);
	}
};

MappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitMapping(this);
	}
};




SolidityParser.MappingContext = MappingContext;

SolidityParser.prototype.mapping = function() {

    var localctx = new MappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SolidityParser.RULE_mapping);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 438;
        this.match(SolidityParser.T__40);
        this.state = 439;
        this.match(SolidityParser.T__18);
        this.state = 440;
        this.elementaryTypeName();
        this.state = 441;
        this.match(SolidityParser.T__41);
        this.state = 442;
        this.typeName(0);
        this.state = 443;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionTypeName;
    return this;
}

FunctionTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeNameContext.prototype.constructor = FunctionTypeNameContext;

FunctionTypeNameContext.prototype.typeNameList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeNameListContext);
    } else {
        return this.getTypedRuleContext(TypeNameListContext,i);
    }
};

FunctionTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionTypeName(this);
	}
};

FunctionTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionTypeName(this);
	}
};




SolidityParser.FunctionTypeNameContext = FunctionTypeNameContext;

SolidityParser.prototype.functionTypeName = function() {

    var localctx = new FunctionTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SolidityParser.RULE_functionTypeName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this.match(SolidityParser.T__29);
        this.state = 446;
        this.typeNameList();
        this.state = 450;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 447;
                _la = this._input.LA(1);
                if(!(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (SolidityParser.T__21 - 22)) | (1 << (SolidityParser.T__23 - 22)) | (1 << (SolidityParser.T__31 - 22)) | (1 << (SolidityParser.T__32 - 22)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 452;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
        }

        this.state = 455;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        if(la_===1) {
            this.state = 453;
            this.match(SolidityParser.T__30);
            this.state = 454;
            this.typeNameList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageLocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_storageLocation;
    return this;
}

StorageLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageLocationContext.prototype.constructor = StorageLocationContext;


StorageLocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStorageLocation(this);
	}
};

StorageLocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStorageLocation(this);
	}
};




SolidityParser.StorageLocationContext = StorageLocationContext;

SolidityParser.prototype.storageLocation = function() {

    var localctx = new StorageLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SolidityParser.RULE_storageLocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.T__42 || _la===SolidityParser.T__43)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitBlock(this);
	}
};




SolidityParser.BlockContext = BlockContext;

SolidityParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SolidityParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.match(SolidityParser.T__11);
        this.state = 463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__11) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__44 - 38)) | (1 << (SolidityParser.T__46 - 38)) | (1 << (SolidityParser.T__47 - 38)) | (1 << (SolidityParser.T__48 - 38)) | (1 << (SolidityParser.T__49 - 38)) | (1 << (SolidityParser.T__50 - 38)) | (1 << (SolidityParser.T__51 - 38)) | (1 << (SolidityParser.T__52 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)) | (1 << (SolidityParser.T__60 - 38)) | (1 << (SolidityParser.T__61 - 38)) | (1 << (SolidityParser.T__62 - 38)) | (1 << (SolidityParser.T__63 - 38)) | (1 << (SolidityParser.T__64 - 38)) | (1 << (SolidityParser.T__65 - 38)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteral - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteral - 93)))) !== 0)) {
            this.state = 460;
            this.statement();
            this.state = 465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 466;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

StatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.inlineAssemblyStatement = function() {
    return this.getTypedRuleContext(InlineAssemblyStatementContext,0);
};

StatementContext.prototype.doWhileStatement = function() {
    return this.getTypedRuleContext(DoWhileStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStatement(this);
	}
};




SolidityParser.StatementContext = StatementContext;

SolidityParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SolidityParser.RULE_statement);
    try {
        this.state = 479;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__44:
            this.enterOuterAlt(localctx, 1);
            this.state = 468;
            this.ifStatement();
            break;
        case SolidityParser.T__46:
            this.enterOuterAlt(localctx, 2);
            this.state = 469;
            this.whileStatement();
            break;
        case SolidityParser.T__26:
            this.enterOuterAlt(localctx, 3);
            this.state = 470;
            this.forStatement();
            break;
        case SolidityParser.T__11:
            this.enterOuterAlt(localctx, 4);
            this.state = 471;
            this.block();
            break;
        case SolidityParser.T__47:
            this.enterOuterAlt(localctx, 5);
            this.state = 472;
            this.inlineAssemblyStatement();
            break;
        case SolidityParser.T__48:
            this.enterOuterAlt(localctx, 6);
            this.state = 473;
            this.doWhileStatement();
            break;
        case SolidityParser.T__49:
            this.enterOuterAlt(localctx, 7);
            this.state = 474;
            this.continueStatement();
            break;
        case SolidityParser.T__50:
            this.enterOuterAlt(localctx, 8);
            this.state = 475;
            this.breakStatement();
            break;
        case SolidityParser.T__51:
            this.enterOuterAlt(localctx, 9);
            this.state = 476;
            this.returnStatement();
            break;
        case SolidityParser.T__52:
            this.enterOuterAlt(localctx, 10);
            this.state = 477;
            this.throwStatement();
            break;
        case SolidityParser.T__18:
        case SolidityParser.T__29:
        case SolidityParser.T__37:
        case SolidityParser.T__40:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.T__58:
        case SolidityParser.T__59:
        case SolidityParser.T__60:
        case SolidityParser.T__61:
        case SolidityParser.T__62:
        case SolidityParser.T__63:
        case SolidityParser.T__64:
        case SolidityParser.T__65:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 11);
            this.state = 478;
            this.simpleStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitExpressionStatement(this);
	}
};




SolidityParser.ExpressionStatementContext = ExpressionStatementContext;

SolidityParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SolidityParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 481;
        this.expression(0);
        this.state = 482;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIfStatement(this);
	}
};




SolidityParser.IfStatementContext = IfStatementContext;

SolidityParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SolidityParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.match(SolidityParser.T__44);
        this.state = 485;
        this.match(SolidityParser.T__18);
        this.state = 486;
        this.expression(0);
        this.state = 487;
        this.match(SolidityParser.T__19);
        this.state = 488;
        this.statement();
        this.state = 491;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        if(la_===1) {
            this.state = 489;
            this.match(SolidityParser.T__45);
            this.state = 490;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitWhileStatement(this);
	}
};




SolidityParser.WhileStatementContext = WhileStatementContext;

SolidityParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SolidityParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 493;
        this.match(SolidityParser.T__46);
        this.state = 494;
        this.match(SolidityParser.T__18);
        this.state = 495;
        this.expression(0);
        this.state = 496;
        this.match(SolidityParser.T__19);
        this.state = 497;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_simpleStatement;
    return this;
}

SimpleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleStatementContext.prototype.constructor = SimpleStatementContext;

SimpleStatementContext.prototype.variableDeclarationStatement = function() {
    return this.getTypedRuleContext(VariableDeclarationStatementContext,0);
};

SimpleStatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

SimpleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterSimpleStatement(this);
	}
};

SimpleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitSimpleStatement(this);
	}
};




SolidityParser.SimpleStatementContext = SimpleStatementContext;

SolidityParser.prototype.simpleStatement = function() {

    var localctx = new SimpleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SolidityParser.RULE_simpleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 501;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.state = 499;
            this.variableDeclarationStatement();
            break;

        case 2:
            this.state = 500;
            this.expressionStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

ForStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitForStatement(this);
	}
};




SolidityParser.ForStatementContext = ForStatementContext;

SolidityParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SolidityParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 503;
        this.match(SolidityParser.T__26);
        this.state = 504;
        this.match(SolidityParser.T__18);
        this.state = 507;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__18:
        case SolidityParser.T__29:
        case SolidityParser.T__37:
        case SolidityParser.T__40:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.T__58:
        case SolidityParser.T__59:
        case SolidityParser.T__60:
        case SolidityParser.T__61:
        case SolidityParser.T__62:
        case SolidityParser.T__63:
        case SolidityParser.T__64:
        case SolidityParser.T__65:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.state = 505;
            this.simpleStatement();
            break;
        case SolidityParser.T__1:
            this.state = 506;
            this.match(SolidityParser.T__1);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 510;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)) | (1 << (SolidityParser.T__60 - 38)) | (1 << (SolidityParser.T__61 - 38)) | (1 << (SolidityParser.T__62 - 38)) | (1 << (SolidityParser.T__63 - 38)) | (1 << (SolidityParser.T__64 - 38)) | (1 << (SolidityParser.T__65 - 38)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteral - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteral - 93)))) !== 0)) {
            this.state = 509;
            this.expression(0);
        }

        this.state = 512;
        this.match(SolidityParser.T__1);
        this.state = 514;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)) | (1 << (SolidityParser.T__60 - 38)) | (1 << (SolidityParser.T__61 - 38)) | (1 << (SolidityParser.T__62 - 38)) | (1 << (SolidityParser.T__63 - 38)) | (1 << (SolidityParser.T__64 - 38)) | (1 << (SolidityParser.T__65 - 38)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteral - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteral - 93)))) !== 0)) {
            this.state = 513;
            this.expression(0);
        }

        this.state = 516;
        this.match(SolidityParser.T__19);
        this.state = 517;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineAssemblyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inlineAssemblyStatement;
    return this;
}

InlineAssemblyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineAssemblyStatementContext.prototype.constructor = InlineAssemblyStatementContext;

InlineAssemblyStatementContext.prototype.inlineAssemblyBlock = function() {
    return this.getTypedRuleContext(InlineAssemblyBlockContext,0);
};

InlineAssemblyStatementContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

InlineAssemblyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterInlineAssemblyStatement(this);
	}
};

InlineAssemblyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitInlineAssemblyStatement(this);
	}
};




SolidityParser.InlineAssemblyStatementContext = InlineAssemblyStatementContext;

SolidityParser.prototype.inlineAssemblyStatement = function() {

    var localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SolidityParser.RULE_inlineAssemblyStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this.match(SolidityParser.T__47);
        this.state = 521;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.StringLiteral) {
            this.state = 520;
            this.match(SolidityParser.StringLiteral);
        }

        this.state = 523;
        this.inlineAssemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoWhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_doWhileStatement;
    return this;
}

DoWhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoWhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitDoWhileStatement(this);
	}
};




SolidityParser.DoWhileStatementContext = DoWhileStatementContext;

SolidityParser.prototype.doWhileStatement = function() {

    var localctx = new DoWhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SolidityParser.RULE_doWhileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 525;
        this.match(SolidityParser.T__48);
        this.state = 526;
        this.statement();
        this.state = 527;
        this.match(SolidityParser.T__46);
        this.state = 528;
        this.match(SolidityParser.T__18);
        this.state = 529;
        this.expression(0);
        this.state = 530;
        this.match(SolidityParser.T__19);
        this.state = 531;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;


ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitContinueStatement(this);
	}
};




SolidityParser.ContinueStatementContext = ContinueStatementContext;

SolidityParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SolidityParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 533;
        this.match(SolidityParser.T__49);
        this.state = 534;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;


BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitBreakStatement(this);
	}
};




SolidityParser.BreakStatementContext = BreakStatementContext;

SolidityParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SolidityParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 536;
        this.match(SolidityParser.T__50);
        this.state = 537;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitReturnStatement(this);
	}
};




SolidityParser.ReturnStatementContext = ReturnStatementContext;

SolidityParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SolidityParser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        this.match(SolidityParser.T__51);
        this.state = 541;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)) | (1 << (SolidityParser.T__60 - 38)) | (1 << (SolidityParser.T__61 - 38)) | (1 << (SolidityParser.T__62 - 38)) | (1 << (SolidityParser.T__63 - 38)) | (1 << (SolidityParser.T__64 - 38)) | (1 << (SolidityParser.T__65 - 38)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteral - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteral - 93)))) !== 0)) {
            this.state = 540;
            this.expression(0);
        }

        this.state = 543;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;


ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitThrowStatement(this);
	}
};




SolidityParser.ThrowStatementContext = ThrowStatementContext;

SolidityParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SolidityParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        this.match(SolidityParser.T__52);
        this.state = 546;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;
    return this;
}

VariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationStatementContext.prototype.constructor = VariableDeclarationStatementContext;

VariableDeclarationStatementContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

VariableDeclarationStatementContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

VariableDeclarationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVariableDeclarationStatement(this);
	}
};

VariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVariableDeclarationStatement(this);
	}
};




SolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext;

SolidityParser.prototype.variableDeclarationStatement = function() {

    var localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SolidityParser.RULE_variableDeclarationStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        switch(la_) {
        case 1:
            this.state = 548;
            this.match(SolidityParser.T__53);
            this.state = 549;
            this.identifierList();
            break;

        case 2:
            this.state = 550;
            this.variableDeclaration();
            break;

        }
        this.state = 555;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__24) {
            this.state = 553;
            this.match(SolidityParser.T__24);
            this.state = 554;
            this.expression(0);
        }

        this.state = 557;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Identifier);
    } else {
        return this.getToken(SolidityParser.Identifier, i);
    }
};


IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIdentifierList(this);
	}
};




SolidityParser.IdentifierListContext = IdentifierListContext;

SolidityParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SolidityParser.RULE_identifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 559;
        this.match(SolidityParser.T__18);
        this.state = 566;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 561;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SolidityParser.Identifier) {
                    this.state = 560;
                    this.match(SolidityParser.Identifier);
                }

                this.state = 563;
                this.match(SolidityParser.T__12); 
            }
            this.state = 568;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
        }

        this.state = 570;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Identifier) {
            this.state = 569;
            this.match(SolidityParser.Identifier);
        }

        this.state = 572;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementaryTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_elementaryTypeName;
    return this;
}

ElementaryTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementaryTypeNameContext.prototype.constructor = ElementaryTypeNameContext;

ElementaryTypeNameContext.prototype.Int = function() {
    return this.getToken(SolidityParser.Int, 0);
};

ElementaryTypeNameContext.prototype.Uint = function() {
    return this.getToken(SolidityParser.Uint, 0);
};

ElementaryTypeNameContext.prototype.Byte = function() {
    return this.getToken(SolidityParser.Byte, 0);
};

ElementaryTypeNameContext.prototype.Fixed = function() {
    return this.getToken(SolidityParser.Fixed, 0);
};

ElementaryTypeNameContext.prototype.Ufixed = function() {
    return this.getToken(SolidityParser.Ufixed, 0);
};

ElementaryTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterElementaryTypeName(this);
	}
};

ElementaryTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitElementaryTypeName(this);
	}
};




SolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext;

SolidityParser.prototype.elementaryTypeName = function() {

    var localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SolidityParser.RULE_elementaryTypeName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        _la = this._input.LA(1);
        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (SolidityParser.T__53 - 54)) | (1 << (SolidityParser.T__54 - 54)) | (1 << (SolidityParser.T__55 - 54)) | (1 << (SolidityParser.T__56 - 54)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

ExpressionContext.prototype.functionCallArguments = function() {
    return this.getTypedRuleContext(FunctionCallArgumentsContext,0);
};

ExpressionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitExpression(this);
	}
};



SolidityParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 96;
    this.enterRecursionRule(localctx, 96, SolidityParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__59:
            this.state = 577;
            this.match(SolidityParser.T__59);
            this.state = 578;
            this.typeName(0);
            break;
        case SolidityParser.T__18:
            this.state = 579;
            this.match(SolidityParser.T__18);
            this.state = 580;
            this.expression(0);
            this.state = 581;
            this.match(SolidityParser.T__19);
            break;
        case SolidityParser.T__57:
        case SolidityParser.T__58:
            this.state = 583;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__57 || _la===SolidityParser.T__58)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 584;
            this.expression(20);
            break;
        case SolidityParser.T__60:
        case SolidityParser.T__61:
            this.state = 585;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__60 || _la===SolidityParser.T__61)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 586;
            this.expression(19);
            break;
        case SolidityParser.T__62:
        case SolidityParser.T__63:
            this.state = 587;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__62 || _la===SolidityParser.T__63)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 588;
            this.expression(18);
            break;
        case SolidityParser.T__64:
            this.state = 589;
            this.match(SolidityParser.T__64);
            this.state = 590;
            this.expression(17);
            break;
        case SolidityParser.T__65:
            this.state = 591;
            this.match(SolidityParser.T__65);
            this.state = 592;
            this.expression(16);
            break;
        case SolidityParser.T__37:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.state = 593;
            this.primaryExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 658;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 656;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 596;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 597;
                    this.match(SolidityParser.T__66);
                    this.state = 598;
                    this.expression(16);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 599;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 600;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__9 || _la===SolidityParser.T__67 || _la===SolidityParser.T__68)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 601;
                    this.expression(15);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 602;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 603;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__60 || _la===SolidityParser.T__61)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 604;
                    this.expression(14);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 605;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 606;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__69 || _la===SolidityParser.T__70)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 607;
                    this.expression(13);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 608;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 609;
                    this.match(SolidityParser.T__71);
                    this.state = 610;
                    this.expression(12);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 611;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 612;
                    this.match(SolidityParser.T__2);
                    this.state = 613;
                    this.expression(11);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 614;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 615;
                    this.match(SolidityParser.T__72);
                    this.state = 616;
                    this.expression(10);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 617;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 618;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 619;
                    this.expression(9);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 620;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 621;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__73 || _la===SolidityParser.T__74)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 622;
                    this.expression(8);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 623;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 624;
                    this.match(SolidityParser.T__75);
                    this.state = 625;
                    this.expression(7);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 626;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 627;
                    this.match(SolidityParser.T__76);
                    this.state = 628;
                    this.expression(6);
                    break;

                case 12:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 629;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 630;
                    this.match(SolidityParser.T__77);
                    this.state = 631;
                    this.expression(0);
                    this.state = 632;
                    this.match(SolidityParser.T__78);
                    this.state = 633;
                    this.expression(5);
                    break;

                case 13:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 635;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 636;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__24 || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (SolidityParser.T__79 - 80)) | (1 << (SolidityParser.T__80 - 80)) | (1 << (SolidityParser.T__81 - 80)) | (1 << (SolidityParser.T__82 - 80)) | (1 << (SolidityParser.T__83 - 80)) | (1 << (SolidityParser.T__84 - 80)) | (1 << (SolidityParser.T__85 - 80)) | (1 << (SolidityParser.T__86 - 80)) | (1 << (SolidityParser.T__87 - 80)) | (1 << (SolidityParser.T__88 - 80)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 637;
                    this.expression(4);
                    break;

                case 14:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 638;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 639;
                    this.match(SolidityParser.T__12);
                    this.state = 640;
                    this.expression(3);
                    break;

                case 15:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 641;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 642;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__57 || _la===SolidityParser.T__58)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 16:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 643;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 644;
                    this.match(SolidityParser.T__37);
                    this.state = 645;
                    this.expression(0);
                    this.state = 646;
                    this.match(SolidityParser.T__38);
                    break;

                case 17:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 648;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 649;
                    this.match(SolidityParser.T__18);
                    this.state = 650;
                    this.functionCallArguments();
                    this.state = 651;
                    this.match(SolidityParser.T__19);
                    break;

                case 18:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 653;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 654;
                    this.match(SolidityParser.T__39);
                    this.state = 655;
                    this.match(SolidityParser.Identifier);
                    break;

                } 
            }
            this.state = 660;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.BooleanLiteral = function() {
    return this.getToken(SolidityParser.BooleanLiteral, 0);
};

PrimaryExpressionContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

PrimaryExpressionContext.prototype.HexLiteral = function() {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

PrimaryExpressionContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

PrimaryExpressionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

PrimaryExpressionContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

PrimaryExpressionContext.prototype.elementaryTypeNameExpression = function() {
    return this.getTypedRuleContext(ElementaryTypeNameExpressionContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPrimaryExpression(this);
	}
};




SolidityParser.PrimaryExpressionContext = PrimaryExpressionContext;

SolidityParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SolidityParser.RULE_primaryExpression);
    try {
        this.state = 668;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 661;
            this.match(SolidityParser.BooleanLiteral);
            break;
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
            this.enterOuterAlt(localctx, 2);
            this.state = 662;
            this.numberLiteral();
            break;
        case SolidityParser.HexLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 663;
            this.match(SolidityParser.HexLiteral);
            break;
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 664;
            this.match(SolidityParser.StringLiteral);
            break;
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 5);
            this.state = 665;
            this.match(SolidityParser.Identifier);
            break;
        case SolidityParser.T__37:
            this.enterOuterAlt(localctx, 6);
            this.state = 666;
            this.arrayLiteral();
            break;
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
            this.enterOuterAlt(localctx, 7);
            this.state = 667;
            this.elementaryTypeNameExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitExpressionList(this);
	}
};




SolidityParser.ExpressionListContext = ExpressionListContext;

SolidityParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SolidityParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        this.expression(0);
        this.state = 675;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__12) {
            this.state = 671;
            this.match(SolidityParser.T__12);
            this.state = 672;
            this.expression(0);
            this.state = 677;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameValueListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_nameValueList;
    return this;
}

NameValueListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameValueListContext.prototype.constructor = NameValueListContext;

NameValueListContext.prototype.nameValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameValueContext);
    } else {
        return this.getTypedRuleContext(NameValueContext,i);
    }
};

NameValueListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterNameValueList(this);
	}
};

NameValueListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitNameValueList(this);
	}
};




SolidityParser.NameValueListContext = NameValueListContext;

SolidityParser.prototype.nameValueList = function() {

    var localctx = new NameValueListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SolidityParser.RULE_nameValueList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this.nameValue();
        this.state = 683;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 679;
                this.match(SolidityParser.T__12);
                this.state = 680;
                this.nameValue(); 
            }
            this.state = 685;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
        }

        this.state = 687;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__12) {
            this.state = 686;
            this.match(SolidityParser.T__12);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_nameValue;
    return this;
}

NameValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameValueContext.prototype.constructor = NameValueContext;

NameValueContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

NameValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NameValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterNameValue(this);
	}
};

NameValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitNameValue(this);
	}
};




SolidityParser.NameValueContext = NameValueContext;

SolidityParser.prototype.nameValue = function() {

    var localctx = new NameValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SolidityParser.RULE_nameValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        this.match(SolidityParser.Identifier);
        this.state = 690;
        this.match(SolidityParser.T__78);
        this.state = 691;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionCallArguments;
    return this;
}

FunctionCallArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallArgumentsContext.prototype.constructor = FunctionCallArgumentsContext;

FunctionCallArgumentsContext.prototype.nameValueList = function() {
    return this.getTypedRuleContext(NameValueListContext,0);
};

FunctionCallArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

FunctionCallArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionCallArguments(this);
	}
};

FunctionCallArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionCallArguments(this);
	}
};




SolidityParser.FunctionCallArgumentsContext = FunctionCallArgumentsContext;

SolidityParser.prototype.functionCallArguments = function() {

    var localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SolidityParser.RULE_functionCallArguments);
    var _la = 0; // Token type
    try {
        this.state = 701;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__11:
            this.enterOuterAlt(localctx, 1);
            this.state = 693;
            this.match(SolidityParser.T__11);
            this.state = 695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.Identifier) {
                this.state = 694;
                this.nameValueList();
            }

            this.state = 697;
            this.match(SolidityParser.T__13);
            break;
        case SolidityParser.T__18:
        case SolidityParser.T__19:
        case SolidityParser.T__37:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.T__58:
        case SolidityParser.T__59:
        case SolidityParser.T__60:
        case SolidityParser.T__61:
        case SolidityParser.T__62:
        case SolidityParser.T__63:
        case SolidityParser.T__64:
        case SolidityParser.T__65:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 699;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__18 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)) | (1 << (SolidityParser.T__60 - 38)) | (1 << (SolidityParser.T__61 - 38)) | (1 << (SolidityParser.T__62 - 38)) | (1 << (SolidityParser.T__63 - 38)) | (1 << (SolidityParser.T__64 - 38)) | (1 << (SolidityParser.T__65 - 38)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteral - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteral - 93)))) !== 0)) {
                this.state = 698;
                this.expressionList();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineAssemblyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inlineAssemblyBlock;
    return this;
}

InlineAssemblyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineAssemblyBlockContext.prototype.constructor = InlineAssemblyBlockContext;

InlineAssemblyBlockContext.prototype.assemblyItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyItemContext);
    } else {
        return this.getTypedRuleContext(AssemblyItemContext,i);
    }
};

InlineAssemblyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterInlineAssemblyBlock(this);
	}
};

InlineAssemblyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitInlineAssemblyBlock(this);
	}
};




SolidityParser.InlineAssemblyBlockContext = InlineAssemblyBlockContext;

SolidityParser.prototype.inlineAssemblyBlock = function() {

    var localctx = new InlineAssemblyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SolidityParser.RULE_inlineAssemblyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this.match(SolidityParser.T__11);
        this.state = 707;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__11 || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (SolidityParser.T__89 - 90)) | (1 << (SolidityParser.T__91 - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) !== 0)) {
            this.state = 704;
            this.assemblyItem();
            this.state = 709;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 710;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyItem;
    return this;
}

AssemblyItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyItemContext.prototype.constructor = AssemblyItemContext;

AssemblyItemContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyItemContext.prototype.functionalAssemblyExpression = function() {
    return this.getTypedRuleContext(FunctionalAssemblyExpressionContext,0);
};

AssemblyItemContext.prototype.inlineAssemblyBlock = function() {
    return this.getTypedRuleContext(InlineAssemblyBlockContext,0);
};

AssemblyItemContext.prototype.assemblyLocalBinding = function() {
    return this.getTypedRuleContext(AssemblyLocalBindingContext,0);
};

AssemblyItemContext.prototype.assemblyAssignment = function() {
    return this.getTypedRuleContext(AssemblyAssignmentContext,0);
};

AssemblyItemContext.prototype.assemblyLabel = function() {
    return this.getTypedRuleContext(AssemblyLabelContext,0);
};

AssemblyItemContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

AssemblyItemContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

AssemblyItemContext.prototype.HexLiteral = function() {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

AssemblyItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyItem(this);
	}
};

AssemblyItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyItem(this);
	}
};




SolidityParser.AssemblyItemContext = AssemblyItemContext;

SolidityParser.prototype.assemblyItem = function() {

    var localctx = new AssemblyItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SolidityParser.RULE_assemblyItem);
    try {
        this.state = 721;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 712;
            this.match(SolidityParser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 713;
            this.functionalAssemblyExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 714;
            this.inlineAssemblyBlock();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 715;
            this.assemblyLocalBinding();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 716;
            this.assemblyAssignment();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 717;
            this.assemblyLabel();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 718;
            this.numberLiteral();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 719;
            this.match(SolidityParser.StringLiteral);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 720;
            this.match(SolidityParser.HexLiteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyLocalBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyLocalBinding;
    return this;
}

AssemblyLocalBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyLocalBindingContext.prototype.constructor = AssemblyLocalBindingContext;

AssemblyLocalBindingContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyLocalBindingContext.prototype.functionalAssemblyExpression = function() {
    return this.getTypedRuleContext(FunctionalAssemblyExpressionContext,0);
};

AssemblyLocalBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyLocalBinding(this);
	}
};

AssemblyLocalBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyLocalBinding(this);
	}
};




SolidityParser.AssemblyLocalBindingContext = AssemblyLocalBindingContext;

SolidityParser.prototype.assemblyLocalBinding = function() {

    var localctx = new AssemblyLocalBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SolidityParser.RULE_assemblyLocalBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 723;
        this.match(SolidityParser.T__89);
        this.state = 724;
        this.match(SolidityParser.Identifier);
        this.state = 725;
        this.match(SolidityParser.T__90);
        this.state = 726;
        this.functionalAssemblyExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyAssignment;
    return this;
}

AssemblyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyAssignmentContext.prototype.constructor = AssemblyAssignmentContext;

AssemblyAssignmentContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyAssignmentContext.prototype.functionalAssemblyExpression = function() {
    return this.getTypedRuleContext(FunctionalAssemblyExpressionContext,0);
};

AssemblyAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyAssignment(this);
	}
};

AssemblyAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyAssignment(this);
	}
};




SolidityParser.AssemblyAssignmentContext = AssemblyAssignmentContext;

SolidityParser.prototype.assemblyAssignment = function() {

    var localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SolidityParser.RULE_assemblyAssignment);
    try {
        this.state = 733;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 728;
            this.match(SolidityParser.Identifier);
            this.state = 729;
            this.match(SolidityParser.T__90);
            this.state = 730;
            this.functionalAssemblyExpression();
            break;
        case SolidityParser.T__91:
            this.enterOuterAlt(localctx, 2);
            this.state = 731;
            this.match(SolidityParser.T__91);
            this.state = 732;
            this.match(SolidityParser.Identifier);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyLabel;
    return this;
}

AssemblyLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyLabelContext.prototype.constructor = AssemblyLabelContext;

AssemblyLabelContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyLabel(this);
	}
};

AssemblyLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyLabel(this);
	}
};




SolidityParser.AssemblyLabelContext = AssemblyLabelContext;

SolidityParser.prototype.assemblyLabel = function() {

    var localctx = new AssemblyLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SolidityParser.RULE_assemblyLabel);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 735;
        this.match(SolidityParser.Identifier);
        this.state = 736;
        this.match(SolidityParser.T__78);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionalAssemblyExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionalAssemblyExpression;
    return this;
}

FunctionalAssemblyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionalAssemblyExpressionContext.prototype.constructor = FunctionalAssemblyExpressionContext;

FunctionalAssemblyExpressionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

FunctionalAssemblyExpressionContext.prototype.assemblyItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyItemContext);
    } else {
        return this.getTypedRuleContext(AssemblyItemContext,i);
    }
};

FunctionalAssemblyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionalAssemblyExpression(this);
	}
};

FunctionalAssemblyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionalAssemblyExpression(this);
	}
};




SolidityParser.FunctionalAssemblyExpressionContext = FunctionalAssemblyExpressionContext;

SolidityParser.prototype.functionalAssemblyExpression = function() {

    var localctx = new FunctionalAssemblyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SolidityParser.RULE_functionalAssemblyExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 738;
        this.match(SolidityParser.Identifier);
        this.state = 739;
        this.match(SolidityParser.T__18);
        this.state = 741;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__11 || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (SolidityParser.T__89 - 90)) | (1 << (SolidityParser.T__91 - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) !== 0)) {
            this.state = 740;
            this.assemblyItem();
        }

        this.state = 747;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__12) {
            this.state = 743;
            this.match(SolidityParser.T__12);
            this.state = 744;
            this.assemblyItem();
            this.state = 749;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 750;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitArrayLiteral(this);
	}
};




SolidityParser.ArrayLiteralContext = ArrayLiteralContext;

SolidityParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SolidityParser.RULE_arrayLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 752;
        this.match(SolidityParser.T__37);
        this.state = 761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)) | (1 << (SolidityParser.T__60 - 38)) | (1 << (SolidityParser.T__61 - 38)) | (1 << (SolidityParser.T__62 - 38)) | (1 << (SolidityParser.T__63 - 38)) | (1 << (SolidityParser.T__64 - 38)) | (1 << (SolidityParser.T__65 - 38)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.BooleanLiteral - 93)) | (1 << (SolidityParser.DecimalNumber - 93)) | (1 << (SolidityParser.HexNumber - 93)) | (1 << (SolidityParser.HexLiteral - 93)) | (1 << (SolidityParser.Identifier - 93)) | (1 << (SolidityParser.StringLiteral - 93)))) !== 0)) {
            this.state = 753;
            this.expression(0);
            this.state = 758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 754;
                this.match(SolidityParser.T__12);
                this.state = 755;
                this.expression(0);
                this.state = 760;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 763;
        this.match(SolidityParser.T__38);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementaryTypeNameExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_elementaryTypeNameExpression;
    return this;
}

ElementaryTypeNameExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementaryTypeNameExpressionContext.prototype.constructor = ElementaryTypeNameExpressionContext;

ElementaryTypeNameExpressionContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

ElementaryTypeNameExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterElementaryTypeNameExpression(this);
	}
};

ElementaryTypeNameExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitElementaryTypeNameExpression(this);
	}
};




SolidityParser.ElementaryTypeNameExpressionContext = ElementaryTypeNameExpressionContext;

SolidityParser.prototype.elementaryTypeNameExpression = function() {

    var localctx = new ElementaryTypeNameExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SolidityParser.RULE_elementaryTypeNameExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 765;
        this.elementaryTypeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_numberLiteral;
    return this;
}

NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

NumberLiteralContext.prototype.DecimalNumber = function() {
    return this.getToken(SolidityParser.DecimalNumber, 0);
};

NumberLiteralContext.prototype.HexNumber = function() {
    return this.getToken(SolidityParser.HexNumber, 0);
};

NumberLiteralContext.prototype.NumberUnit = function() {
    return this.getToken(SolidityParser.NumberUnit, 0);
};

NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitNumberLiteral(this);
	}
};




SolidityParser.NumberLiteralContext = NumberLiteralContext;

SolidityParser.prototype.numberLiteral = function() {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SolidityParser.RULE_numberLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 767;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.DecimalNumber || _la===SolidityParser.HexNumber)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 769;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        if(la_===1) {
            this.state = 768;
            this.match(SolidityParser.NumberUnit);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SolidityParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 27:
			return this.typeName_sempred(localctx, predIndex);
	case 48:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SolidityParser.prototype.typeName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 15);
		case 2:
			return this.precpred(this._ctx, 14);
		case 3:
			return this.precpred(this._ctx, 13);
		case 4:
			return this.precpred(this._ctx, 12);
		case 5:
			return this.precpred(this._ctx, 11);
		case 6:
			return this.precpred(this._ctx, 10);
		case 7:
			return this.precpred(this._ctx, 9);
		case 8:
			return this.precpred(this._ctx, 8);
		case 9:
			return this.precpred(this._ctx, 7);
		case 10:
			return this.precpred(this._ctx, 6);
		case 11:
			return this.precpred(this._ctx, 5);
		case 12:
			return this.precpred(this._ctx, 4);
		case 13:
			return this.precpred(this._ctx, 3);
		case 14:
			return this.precpred(this._ctx, 2);
		case 15:
			return this.precpred(this._ctx, 26);
		case 16:
			return this.precpred(this._ctx, 24);
		case 17:
			return this.precpred(this._ctx, 23);
		case 18:
			return this.precpred(this._ctx, 22);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SolidityParser = SolidityParser;
